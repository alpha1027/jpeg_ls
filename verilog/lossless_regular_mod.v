// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module lossless_regular_mod (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Q,
        SIGN,
        Px,
        xp_read,
        N_address0,
        N_ce0,
        N_we0,
        N_d0,
        N_q0,
        A_address0,
        A_ce0,
        A_we0,
        A_d0,
        A_q0,
        C_address0,
        C_ce0,
        C_we0,
        C_d0,
        C_q0,
        highmask,
        alpha,
        B_address0,
        B_ce0,
        B_we0,
        B_d0,
        B_q0,
        ceil_half_alpha,
        RESET,
        limit,
        bits_i,
        bits_o,
        bits_o_ap_vld,
        reg_r_i,
        reg_r_o,
        reg_r_o_ap_vld,
        qbpp
);

parameter    ap_ST_fsm_state1 = 18'd1;
parameter    ap_ST_fsm_state2 = 18'd2;
parameter    ap_ST_fsm_state3 = 18'd4;
parameter    ap_ST_fsm_state4 = 18'd8;
parameter    ap_ST_fsm_state5 = 18'd16;
parameter    ap_ST_fsm_state6 = 18'd32;
parameter    ap_ST_fsm_state7 = 18'd64;
parameter    ap_ST_fsm_state8 = 18'd128;
parameter    ap_ST_fsm_state9 = 18'd256;
parameter    ap_ST_fsm_state10 = 18'd512;
parameter    ap_ST_fsm_state11 = 18'd1024;
parameter    ap_ST_fsm_state12 = 18'd2048;
parameter    ap_ST_fsm_state13 = 18'd4096;
parameter    ap_ST_fsm_state14 = 18'd8192;
parameter    ap_ST_fsm_state15 = 18'd16384;
parameter    ap_ST_fsm_state16 = 18'd32768;
parameter    ap_ST_fsm_state17 = 18'd65536;
parameter    ap_ST_fsm_state18 = 18'd131072;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] Q;
input  [1:0] SIGN;
input  [15:0] Px;
input  [15:0] xp_read;
output  [8:0] N_address0;
output   N_ce0;
output   N_we0;
output  [31:0] N_d0;
input  [31:0] N_q0;
output  [8:0] A_address0;
output   A_ce0;
output   A_we0;
output  [31:0] A_d0;
input  [31:0] A_q0;
output  [8:0] C_address0;
output   C_ce0;
output   C_we0;
output  [31:0] C_d0;
input  [31:0] C_q0;
input  [31:0] highmask;
input  [31:0] alpha;
output  [8:0] B_address0;
output   B_ce0;
output   B_we0;
output  [31:0] B_d0;
input  [31:0] B_q0;
input  [31:0] ceil_half_alpha;
input  [31:0] RESET;
input  [31:0] limit;
input  [31:0] bits_i;
output  [31:0] bits_o;
output   bits_o_ap_vld;
input  [31:0] reg_r_i;
output  [31:0] reg_r_o;
output   reg_r_o_ap_vld;
input  [31:0] qbpp;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[8:0] N_address0;
reg N_ce0;
reg N_we0;
reg[8:0] A_address0;
reg A_ce0;
reg A_we0;
reg[31:0] A_d0;
reg[8:0] C_address0;
reg C_ce0;
reg C_we0;
reg[31:0] C_d0;
reg[8:0] B_address0;
reg B_ce0;
reg B_we0;
reg[31:0] B_d0;
reg[31:0] bits_o;
reg bits_o_ap_vld;
reg[31:0] reg_r_o;
reg reg_r_o_ap_vld;

(* fsm_encoding = "none" *) reg   [17:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [63:0] tmp_fu_229_p1;
reg  signed [63:0] tmp_reg_921;
reg   [8:0] C_addr_reg_928;
reg  signed [31:0] C_load_reg_933;
wire    ap_CS_fsm_state2;
wire  signed [31:0] SIGN_cast_fu_234_p1;
reg  signed [31:0] SIGN_cast_reg_942;
wire    ap_CS_fsm_state3;
wire   [31:0] grp_fu_238_p2;
reg   [31:0] tmp_s_reg_948;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire  signed [31:0] tmp_36_fu_318_p2;
reg  signed [31:0] tmp_36_reg_959;
reg   [8:0] N_addr_reg_964;
wire    ap_CS_fsm_state7;
reg   [8:0] A_addr_reg_969;
wire   [31:0] grp_fu_324_p2;
reg   [31:0] Errval_reg_974;
reg   [0:0] tmp_37_reg_980;
reg   [31:0] Nt_3_reg_985;
wire    ap_CS_fsm_state8;
reg   [31:0] At_reg_994;
wire   [31:0] Errval_5_fu_340_p3;
reg   [31:0] Errval_5_reg_1000;
wire   [7:0] k_1_fu_351_p2;
wire    ap_CS_fsm_state9;
wire   [31:0] nst_1_fu_357_p2;
wire   [0:0] tmp_38_fu_346_p2;
reg   [8:0] B_addr_reg_1022;
wire   [0:0] tmp_43_fu_367_p2;
reg   [0:0] tmp_43_reg_1027;
wire   [31:0] Errval_3_fu_372_p2;
reg   [31:0] Errval_3_reg_1034;
wire   [31:0] absErrval_1_fu_376_p2;
reg   [31:0] absErrval_1_reg_1039;
wire   [0:0] slt_fu_393_p2;
reg   [0:0] slt_reg_1045;
wire    ap_CS_fsm_state10;
wire   [30:0] tmp_44_fu_399_p1;
reg   [30:0] tmp_44_reg_1050;
wire   [31:0] Bt_1_fu_412_p2;
reg   [31:0] Bt_1_reg_1055;
wire   [31:0] tmp_46_fu_418_p2;
reg   [31:0] tmp_46_reg_1062;
wire   [31:0] MErrval_2_fu_467_p3;
reg   [31:0] MErrval_2_reg_1067;
wire    ap_CS_fsm_state11;
wire   [0:0] tmp_47_fu_478_p2;
reg   [0:0] tmp_47_reg_1074;
wire   [31:0] tmp_50_fu_533_p2;
reg   [31:0] tmp_50_reg_1078;
wire    ap_CS_fsm_state12;
wire   [0:0] tmp_51_fu_539_p2;
reg   [0:0] tmp_51_reg_1083;
wire   [31:0] tmp_56_fu_556_p2;
reg   [31:0] tmp_56_reg_1090;
wire   [0:0] tmp_52_fu_562_p2;
reg   [0:0] tmp_52_reg_1096;
wire   [31:0] tmp_60_fu_579_p2;
reg   [31:0] tmp_60_reg_1103;
wire   [31:0] tmp_62_fu_616_p1;
reg   [31:0] tmp_62_reg_1109;
wire    ap_CS_fsm_state13;
wire   [31:0] unary_fu_620_p2;
reg   [31:0] unary_reg_1115;
wire   [0:0] tmp_63_fu_629_p2;
reg   [0:0] tmp_63_reg_1125;
reg   [31:0] bits_load_reg_1129;
wire   [31:0] tmp_70_fu_639_p2;
reg   [31:0] tmp_70_reg_1135;
wire   [30:0] tmp_87_fu_645_p1;
reg   [30:0] tmp_87_reg_1142;
wire   [31:0] tmp_64_fu_649_p2;
reg   [31:0] tmp_64_reg_1147;
wire   [30:0] tmp_78_fu_655_p1;
reg   [30:0] tmp_78_reg_1154;
wire   [31:0] tmp_75_fu_701_p3;
reg   [31:0] tmp_75_reg_1159;
wire    ap_CS_fsm_state14;
wire   [31:0] tmp_88_fu_727_p2;
wire    ap_CS_fsm_state15;
wire   [0:0] tmp_77_fu_709_p2;
wire   [31:0] tmp_90_fu_749_p2;
reg   [31:0] tmp_90_reg_1172;
wire   [31:0] tmp_91_fu_765_p2;
reg   [31:0] tmp_91_reg_1177;
wire   [31:0] tmp_69_fu_846_p3;
reg   [31:0] tmp_69_reg_1182;
wire    ap_CS_fsm_state17;
wire   [31:0] tmp_79_fu_872_p2;
wire    ap_CS_fsm_state18;
wire   [0:0] tmp_76_fu_854_p2;
wire   [31:0] tmp_83_fu_894_p2;
reg   [31:0] tmp_83_reg_1195;
wire   [31:0] tmp_84_fu_910_p2;
reg   [31:0] tmp_84_reg_1200;
reg   [7:0] k_reg_158;
reg   [31:0] nst1_reg_170;
wire  signed [31:0] Bt_2_fu_520_p1;
reg   [31:0] ap_phi_mux_tmp_49_phi_fu_182_p4;
reg   [31:0] tmp_49_reg_179;
wire  signed [31:0] Nt_fu_506_p1;
reg   [31:0] ap_phi_mux_Nt1_phi_fu_191_p4;
reg   [31:0] Nt1_reg_188;
reg   [31:0] storemerge_reg_198;
wire   [31:0] tmp_93_fu_780_p2;
reg   [31:0] ap_phi_mux_storemerge1_phi_fu_210_p4;
wire    ap_CS_fsm_state16;
wire   [31:0] tmp_86_fu_791_p2;
reg   [31:0] storemerge2_reg_216;
wire   [31:0] tmp_95_fu_715_p2;
wire   [31:0] tmp_94_fu_860_p2;
wire   [0:0] tmp_53_fu_545_p2;
wire   [31:0] tmp_55_fu_550_p2;
wire   [0:0] tmp_54_fu_568_p2;
wire   [31:0] tmp_59_fu_573_p2;
wire   [31:0] Nt_2_fu_526_p2;
wire  signed [31:0] tmp_48_fu_492_p1;
wire   [31:0] storemerge7_fu_595_p3;
wire   [31:0] storemerge8_fu_608_p3;
wire   [31:0] Px_cast_fu_243_p1;
wire   [31:0] Px_assign_fu_251_p2;
wire   [31:0] tmp_33_fu_260_p2;
wire   [0:0] tmp_34_fu_266_p2;
wire   [31:0] Px_assign_1_fu_284_p2;
wire   [0:0] tmp_35_fu_272_p3;
wire   [0:0] sel_tmp1_fu_298_p2;
wire   [0:0] sel_tmp2_fu_304_p2;
wire   [31:0] Px_assign_2_fu_290_p3;
wire   [31:0] Ix_fu_247_p1;
wire   [31:0] Px_assign_3_fu_310_p3;
wire  signed [1:0] grp_fu_324_p1;
wire    ap_CS_fsm_state6;
wire   [31:0] Errval_2_fu_336_p2;
wire   [31:0] tmp_40_fu_388_p2;
wire   [31:0] tmp_42_fu_382_p2;
wire   [31:0] Errval_1_fu_407_p3;
wire   [31:0] absErrval_2_fu_402_p3;
wire   [0:0] tmp_39_fu_424_p2;
wire   [0:0] rev8_fu_430_p2;
wire   [0:0] tmp_41_fu_435_p2;
wire   [31:0] tmp10_cast_cast_fu_453_p3;
wire   [31:0] tmp_45_fu_448_p2;
wire   [31:0] MErrval_fu_441_p3;
wire   [31:0] MErrval_1_fu_461_p2;
wire   [30:0] tmp_5_fu_483_p4;
wire   [30:0] tmp_3_fu_497_p4;
wire   [30:0] tmp_7_fu_511_p4;
wire   [0:0] tmp_57_fu_585_p2;
wire   [31:0] tmp_58_fu_589_p2;
wire   [0:0] tmp_61_fu_603_p2;
wire   [0:0] tmp_71_fu_659_p2;
wire   [30:0] smax_fu_664_p3;
wire   [31:0] tmp_72_fu_675_p2;
wire   [31:0] tmp_73_fu_680_p2;
wire   [31:0] smax_cast_fu_671_p1;
wire   [31:0] tmp_74_fu_685_p2;
wire   [28:0] tmp_9_fu_691_p4;
wire   [31:0] tmp_89_fu_737_p2;
wire   [31:0] tmp2_fu_743_p2;
wire   [31:0] p_neg5_fu_754_p2;
wire   [31:0] tmp3_fu_760_p2;
wire   [31:0] tmp_92_fu_776_p2;
wire   [31:0] tmp_85_fu_787_p2;
wire   [0:0] tmp_65_fu_804_p2;
wire   [30:0] smax6_fu_809_p3;
wire   [31:0] tmp_66_fu_820_p2;
wire   [31:0] tmp_67_fu_825_p2;
wire   [31:0] smax6_cast_fu_816_p1;
wire   [31:0] tmp_68_fu_830_p2;
wire   [28:0] tmp_8_fu_836_p4;
wire   [31:0] tmp_80_fu_878_p2;
wire   [31:0] tmp_81_fu_883_p2;
wire   [31:0] tmp_82_fu_889_p2;
wire   [31:0] p_neg3_fu_900_p2;
wire   [31:0] tmp1_fu_905_p2;
reg   [17:0] ap_NS_fsm;
reg    ap_condition_343;

// power-on initialization
initial begin
#0 ap_CS_fsm = 18'd1;
end

lossless_doscanlibkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
lossless_doscanlibkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(C_load_reg_933),
    .din1(SIGN),
    .ce(1'b1),
    .dout(grp_fu_238_p2)
);

lossless_doscanlibkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
lossless_doscanlibkb_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_36_reg_959),
    .din1(grp_fu_324_p1),
    .ce(1'b1),
    .dout(grp_fu_324_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (tmp_47_fu_478_p2 == 1'd0))) begin
        Nt1_reg_188 <= Nt_3_reg_985;
    end else if (((1'b1 == ap_CS_fsm_state12) & (tmp_47_reg_1074 == 1'd1))) begin
        Nt1_reg_188 <= Nt_fu_506_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (tmp_38_fu_346_p2 == 1'd1))) begin
        k_reg_158 <= k_1_fu_351_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        k_reg_158 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (tmp_38_fu_346_p2 == 1'd1))) begin
        nst1_reg_170 <= nst_1_fu_357_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        nst1_reg_170 <= N_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (tmp_76_fu_854_p2 == 1'd1))) begin
        storemerge2_reg_216 <= tmp_79_fu_872_p2;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        storemerge2_reg_216 <= tmp_64_reg_1147;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (tmp_77_fu_709_p2 == 1'd1))) begin
        storemerge_reg_198 <= tmp_88_fu_727_p2;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        storemerge_reg_198 <= tmp_70_reg_1135;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (tmp_47_fu_478_p2 == 1'd0))) begin
        tmp_49_reg_179 <= Bt_1_reg_1055;
    end else if (((1'b1 == ap_CS_fsm_state12) & (tmp_47_reg_1074 == 1'd1))) begin
        tmp_49_reg_179 <= Bt_2_fu_520_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        A_addr_reg_969 <= tmp_reg_921;
        Errval_reg_974 <= grp_fu_324_p2;
        N_addr_reg_964 <= tmp_reg_921;
        tmp_37_reg_980 <= grp_fu_324_p2[32'd31];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        At_reg_994 <= A_q0;
        Errval_5_reg_1000 <= Errval_5_fu_340_p3;
        Nt_3_reg_985 <= N_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (tmp_38_fu_346_p2 == 1'd0))) begin
        B_addr_reg_1022 <= tmp_reg_921;
        Errval_3_reg_1034 <= Errval_3_fu_372_p2;
        absErrval_1_reg_1039 <= absErrval_1_fu_376_p2;
        tmp_43_reg_1027 <= tmp_43_fu_367_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        Bt_1_reg_1055 <= Bt_1_fu_412_p2;
        slt_reg_1045 <= slt_fu_393_p2;
        tmp_46_reg_1062 <= tmp_46_fu_418_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        C_addr_reg_928 <= tmp_fu_229_p1;
        tmp_reg_921 <= tmp_fu_229_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        C_load_reg_933 <= C_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        MErrval_2_reg_1067 <= MErrval_2_fu_467_p3;
        tmp_47_reg_1074 <= tmp_47_fu_478_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        SIGN_cast_reg_942 <= SIGN_cast_fu_234_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        bits_load_reg_1129 <= bits_i;
        tmp_62_reg_1109[7 : 0] <= tmp_62_fu_616_p1[7 : 0];
        tmp_63_reg_1125 <= tmp_63_fu_629_p2;
        unary_reg_1115 <= unary_fu_620_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_36_reg_959 <= tmp_36_fu_318_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (tmp_43_reg_1027 == 1'd1))) begin
        tmp_44_reg_1050 <= tmp_44_fu_399_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp_50_reg_1078 <= tmp_50_fu_533_p2;
        tmp_51_reg_1083 <= tmp_51_fu_539_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (tmp_51_fu_539_p2 == 1'd1))) begin
        tmp_52_reg_1096 <= tmp_52_fu_562_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (tmp_51_fu_539_p2 == 1'd0))) begin
        tmp_56_reg_1090 <= tmp_56_fu_556_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (tmp_52_fu_562_p2 == 1'd1) & (tmp_51_fu_539_p2 == 1'd1))) begin
        tmp_60_reg_1103 <= tmp_60_fu_579_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (tmp_63_fu_629_p2 == 1'd1))) begin
        tmp_64_reg_1147 <= tmp_64_fu_649_p2;
        tmp_78_reg_1154 <= tmp_78_fu_655_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        tmp_69_reg_1182[31 : 3] <= tmp_69_fu_846_p3[31 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (tmp_63_fu_629_p2 == 1'd0))) begin
        tmp_70_reg_1135 <= tmp_70_fu_639_p2;
        tmp_87_reg_1142 <= tmp_87_fu_645_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        tmp_75_reg_1159[31 : 3] <= tmp_75_fu_701_p3[31 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (tmp_76_fu_854_p2 == 1'd0))) begin
        tmp_83_reg_1195 <= tmp_83_fu_894_p2;
        tmp_84_reg_1200 <= tmp_84_fu_910_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (tmp_77_fu_709_p2 == 1'd0))) begin
        tmp_90_reg_1172 <= tmp_90_fu_749_p2;
        tmp_91_reg_1177 <= tmp_91_fu_765_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_s_reg_948 <= grp_fu_238_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        A_address0 = A_addr_reg_969;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        A_address0 = tmp_reg_921;
    end else begin
        A_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        A_d0 = tmp_48_fu_492_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        A_d0 = tmp_46_fu_418_p2;
    end else begin
        A_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_state11) & (tmp_47_fu_478_p2 == 1'd1)))) begin
        A_we0 = 1'b1;
    end else begin
        A_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state13) & (tmp_52_reg_1096 == 1'd1) & (tmp_51_reg_1083 == 1'd1)) | ((1'b1 == ap_CS_fsm_state13) & (tmp_51_reg_1083 == 1'd0)))) begin
        B_address0 = B_addr_reg_1022;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        B_address0 = tmp_reg_921;
    end else begin
        B_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9) | ((1'b1 == ap_CS_fsm_state13) & (tmp_52_reg_1096 == 1'd1) & (tmp_51_reg_1083 == 1'd1)) | ((1'b1 == ap_CS_fsm_state13) & (tmp_51_reg_1083 == 1'd0)))) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) & (tmp_52_reg_1096 == 1'd1) & (tmp_51_reg_1083 == 1'd1))) begin
        B_d0 = storemerge8_fu_608_p3;
    end else if (((1'b1 == ap_CS_fsm_state13) & (tmp_51_reg_1083 == 1'd0))) begin
        B_d0 = storemerge7_fu_595_p3;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        B_d0 = Bt_2_fu_520_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        B_d0 = Bt_1_reg_1055;
    end else begin
        B_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state13) & (tmp_52_reg_1096 == 1'd1) & (tmp_51_reg_1083 == 1'd1)) | ((1'b1 == ap_CS_fsm_state13) & (tmp_51_reg_1083 == 1'd0)) | ((1'b1 == ap_CS_fsm_state12) & (tmp_47_reg_1074 == 1'd1)))) begin
        B_we0 = 1'b1;
    end else begin
        B_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (tmp_54_fu_568_p2 == 1'd1) & (tmp_52_fu_562_p2 == 1'd1) & (tmp_51_fu_539_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state12) & (tmp_51_fu_539_p2 == 1'd0) & (tmp_53_fu_545_p2 == 1'd1)))) begin
        C_address0 = C_addr_reg_928;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        C_address0 = tmp_fu_229_p1;
    end else begin
        C_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state12) & (tmp_54_fu_568_p2 == 1'd1) & (tmp_52_fu_562_p2 == 1'd1) & (tmp_51_fu_539_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state12) & (tmp_51_fu_539_p2 == 1'd0) & (tmp_53_fu_545_p2 == 1'd1)))) begin
        C_ce0 = 1'b1;
    end else begin
        C_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        if ((1'b1 == ap_condition_343)) begin
            C_d0 = tmp_59_fu_573_p2;
        end else if (((tmp_51_fu_539_p2 == 1'd0) & (tmp_53_fu_545_p2 == 1'd1))) begin
            C_d0 = tmp_55_fu_550_p2;
        end else begin
            C_d0 = 'bx;
        end
    end else begin
        C_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (tmp_54_fu_568_p2 == 1'd1) & (tmp_52_fu_562_p2 == 1'd1) & (tmp_51_fu_539_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state12) & (tmp_51_fu_539_p2 == 1'd0) & (tmp_53_fu_545_p2 == 1'd1)))) begin
        C_we0 = 1'b1;
    end else begin
        C_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        N_address0 = N_addr_reg_964;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        N_address0 = tmp_reg_921;
    end else begin
        N_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state7))) begin
        N_ce0 = 1'b1;
    end else begin
        N_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        N_we0 = 1'b1;
    end else begin
        N_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (tmp_47_reg_1074 == 1'd1))) begin
        ap_phi_mux_Nt1_phi_fu_191_p4 = Nt_fu_506_p1;
    end else begin
        ap_phi_mux_Nt1_phi_fu_191_p4 = Nt1_reg_188;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        if ((tmp_63_reg_1125 == 1'd1)) begin
            ap_phi_mux_storemerge1_phi_fu_210_p4 = tmp_86_fu_791_p2;
        end else if ((tmp_63_reg_1125 == 1'd0)) begin
            ap_phi_mux_storemerge1_phi_fu_210_p4 = tmp_93_fu_780_p2;
        end else begin
            ap_phi_mux_storemerge1_phi_fu_210_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_storemerge1_phi_fu_210_p4 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (tmp_47_reg_1074 == 1'd1))) begin
        ap_phi_mux_tmp_49_phi_fu_182_p4 = Bt_2_fu_520_p1;
    end else begin
        ap_phi_mux_tmp_49_phi_fu_182_p4 = tmp_49_reg_179;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) & (tmp_76_fu_854_p2 == 1'd0))) begin
        bits_o = tmp_84_fu_910_p2;
    end else if (((1'b1 == ap_CS_fsm_state15) & (tmp_77_fu_709_p2 == 1'd0))) begin
        bits_o = tmp_91_fu_765_p2;
    end else begin
        bits_o = bits_i;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state18) & (tmp_76_fu_854_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state15) & (tmp_77_fu_709_p2 == 1'd0)))) begin
        bits_o_ap_vld = 1'b1;
    end else begin
        bits_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) & (tmp_76_fu_854_p2 == 1'd1))) begin
        reg_r_o = tmp_94_fu_860_p2;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        reg_r_o = ap_phi_mux_storemerge1_phi_fu_210_p4;
    end else if (((1'b1 == ap_CS_fsm_state15) & (tmp_77_fu_709_p2 == 1'd1))) begin
        reg_r_o = tmp_95_fu_715_p2;
    end else begin
        reg_r_o = reg_r_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | ((1'b1 == ap_CS_fsm_state18) & (tmp_76_fu_854_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state15) & (tmp_77_fu_709_p2 == 1'd1)))) begin
        reg_r_o_ap_vld = 1'b1;
    end else begin
        reg_r_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (tmp_38_fu_346_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (tmp_63_fu_629_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_CS_fsm_state15) & (tmp_77_fu_709_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if (((1'b1 == ap_CS_fsm_state18) & (tmp_76_fu_854_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Bt_1_fu_412_p2 = (B_q0 + Errval_1_fu_407_p3);

assign Bt_2_fu_520_p1 = $signed(tmp_7_fu_511_p4);

assign Errval_1_fu_407_p3 = ((tmp_43_reg_1027[0:0] === 1'b1) ? Errval_5_reg_1000 : Errval_3_reg_1034);

assign Errval_2_fu_336_p2 = (alpha + Errval_reg_974);

assign Errval_3_fu_372_p2 = (Errval_5_reg_1000 - alpha);

assign Errval_5_fu_340_p3 = ((tmp_37_reg_980[0:0] === 1'b1) ? Errval_2_fu_336_p2 : Errval_reg_974);

assign Ix_fu_247_p1 = xp_read;

assign MErrval_1_fu_461_p2 = (tmp10_cast_cast_fu_453_p3 + tmp_45_fu_448_p2);

assign MErrval_2_fu_467_p3 = ((tmp_43_reg_1027[0:0] === 1'b1) ? MErrval_fu_441_p3 : MErrval_1_fu_461_p2);

assign MErrval_fu_441_p3 = {{tmp_44_reg_1050}, {tmp_41_fu_435_p2}};

assign N_d0 = Nt_2_fu_526_p2;

assign Nt_2_fu_526_p2 = (ap_phi_mux_Nt1_phi_fu_191_p4 + 32'd1);

assign Nt_fu_506_p1 = $signed(tmp_3_fu_497_p4);

assign Px_assign_1_fu_284_p2 = ($signed(alpha) + $signed(32'd4294967295));

assign Px_assign_2_fu_290_p3 = ((tmp_34_fu_266_p2[0:0] === 1'b1) ? Px_assign_fu_251_p2 : Px_assign_1_fu_284_p2);

assign Px_assign_3_fu_310_p3 = ((sel_tmp2_fu_304_p2[0:0] === 1'b1) ? 32'd0 : Px_assign_2_fu_290_p3);

assign Px_assign_fu_251_p2 = (tmp_s_reg_948 + Px_cast_fu_243_p1);

assign Px_cast_fu_243_p1 = Px;

assign SIGN_cast_fu_234_p1 = $signed(SIGN);

assign absErrval_1_fu_376_p2 = (32'd0 - Errval_3_fu_372_p2);

assign absErrval_2_fu_402_p3 = ((tmp_43_reg_1027[0:0] === 1'b1) ? Errval_5_reg_1000 : absErrval_1_reg_1039);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_condition_343 = ((tmp_54_fu_568_p2 == 1'd1) & (tmp_52_fu_562_p2 == 1'd1) & (tmp_51_fu_539_p2 == 1'd1));
end

assign grp_fu_324_p1 = SIGN_cast_reg_942;

assign k_1_fu_351_p2 = (k_reg_158 + 8'd1);

assign nst_1_fu_357_p2 = nst1_reg_170 << 32'd1;

assign p_neg3_fu_900_p2 = (tmp_62_reg_1109 ^ 32'd4294967295);

assign p_neg5_fu_754_p2 = (qbpp ^ 32'd4294967295);

assign rev8_fu_430_p2 = (slt_reg_1045 ^ 1'd1);

assign sel_tmp1_fu_298_p2 = (tmp_34_fu_266_p2 ^ 1'd1);

assign sel_tmp2_fu_304_p2 = (tmp_35_fu_272_p3 & sel_tmp1_fu_298_p2);

assign slt_fu_393_p2 = (($signed(tmp_40_fu_388_p2) < $signed(tmp_42_fu_382_p2)) ? 1'b1 : 1'b0);

assign smax6_cast_fu_816_p1 = smax6_fu_809_p3;

assign smax6_fu_809_p3 = ((tmp_65_fu_804_p2[0:0] === 1'b1) ? tmp_78_reg_1154 : 31'd25);

assign smax_cast_fu_671_p1 = smax_fu_664_p3;

assign smax_fu_664_p3 = ((tmp_71_fu_659_p2[0:0] === 1'b1) ? tmp_87_reg_1142 : 31'd25);

assign storemerge7_fu_595_p3 = ((tmp_57_fu_585_p2[0:0] === 1'b1) ? tmp_56_reg_1090 : tmp_58_fu_589_p2);

assign storemerge8_fu_608_p3 = ((tmp_61_fu_603_p2[0:0] === 1'b1) ? 32'd0 : tmp_60_reg_1103);

assign tmp10_cast_cast_fu_453_p3 = ((tmp_41_fu_435_p2[0:0] === 1'b1) ? 32'd4294967294 : 32'd4294967295);

assign tmp1_fu_905_p2 = (tmp_69_reg_1182 + p_neg3_fu_900_p2);

assign tmp2_fu_743_p2 = ($signed(tmp_89_fu_737_p2) + $signed(32'd4294967295));

assign tmp3_fu_760_p2 = (tmp_75_reg_1159 + p_neg5_fu_754_p2);

assign tmp_33_fu_260_p2 = (highmask & Px_assign_fu_251_p2);

assign tmp_34_fu_266_p2 = ((tmp_33_fu_260_p2 == 32'd0) ? 1'b1 : 1'b0);

assign tmp_35_fu_272_p3 = Px_assign_fu_251_p2[32'd31];

assign tmp_36_fu_318_p2 = (Ix_fu_247_p1 - Px_assign_3_fu_310_p3);

assign tmp_38_fu_346_p2 = (($signed(nst1_reg_170) < $signed(At_reg_994)) ? 1'b1 : 1'b0);

assign tmp_39_fu_424_p2 = ((k_reg_158 == 8'd0) ? 1'b1 : 1'b0);

assign tmp_3_fu_497_p4 = {{Nt_3_reg_985[31:1]}};

assign tmp_40_fu_388_p2 = (32'd0 - Nt_3_reg_985);

assign tmp_41_fu_435_p2 = (tmp_39_fu_424_p2 & rev8_fu_430_p2);

assign tmp_42_fu_382_p2 = B_q0 << 32'd1;

assign tmp_43_fu_367_p2 = (($signed(Errval_5_reg_1000) < $signed(ceil_half_alpha)) ? 1'b1 : 1'b0);

assign tmp_44_fu_399_p1 = Errval_5_reg_1000[30:0];

assign tmp_45_fu_448_p2 = absErrval_1_reg_1039 << 32'd1;

assign tmp_46_fu_418_p2 = (At_reg_994 + absErrval_2_fu_402_p3);

assign tmp_47_fu_478_p2 = ((Nt_3_reg_985 == RESET) ? 1'b1 : 1'b0);

assign tmp_48_fu_492_p1 = $signed(tmp_5_fu_483_p4);

assign tmp_50_fu_533_p2 = (ap_phi_mux_Nt1_phi_fu_191_p4 ^ 32'd4294967295);

assign tmp_51_fu_539_p2 = (($signed(ap_phi_mux_tmp_49_phi_fu_182_p4) > $signed(tmp_50_fu_533_p2)) ? 1'b1 : 1'b0);

assign tmp_52_fu_562_p2 = (($signed(ap_phi_mux_tmp_49_phi_fu_182_p4) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign tmp_53_fu_545_p2 = (($signed(C_load_reg_933) > $signed(32'd4294967168)) ? 1'b1 : 1'b0);

assign tmp_54_fu_568_p2 = (($signed(C_load_reg_933) < $signed(32'd127)) ? 1'b1 : 1'b0);

assign tmp_55_fu_550_p2 = ($signed(C_load_reg_933) + $signed(32'd4294967295));

assign tmp_56_fu_556_p2 = (Nt_2_fu_526_p2 + ap_phi_mux_tmp_49_phi_fu_182_p4);

assign tmp_57_fu_585_p2 = (($signed(tmp_56_reg_1090) > $signed(tmp_50_reg_1078)) ? 1'b1 : 1'b0);

assign tmp_58_fu_589_p2 = (32'd0 - Nt1_reg_188);

assign tmp_59_fu_573_p2 = ($signed(C_load_reg_933) + $signed(32'd1));

assign tmp_5_fu_483_p4 = {{tmp_46_reg_1062[31:1]}};

assign tmp_60_fu_579_p2 = (ap_phi_mux_tmp_49_phi_fu_182_p4 - Nt_2_fu_526_p2);

assign tmp_61_fu_603_p2 = (($signed(tmp_60_reg_1103) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign tmp_62_fu_616_p1 = k_reg_158;

assign tmp_63_fu_629_p2 = (($signed(unary_fu_620_p2) < $signed(limit)) ? 1'b1 : 1'b0);

assign tmp_64_fu_649_p2 = (bits_i - unary_fu_620_p2);

assign tmp_65_fu_804_p2 = (($signed(tmp_64_reg_1147) > $signed(32'd25)) ? 1'b1 : 1'b0);

assign tmp_66_fu_820_p2 = (32'd7 + unary_reg_1115);

assign tmp_67_fu_825_p2 = (tmp_66_fu_820_p2 - bits_load_reg_1129);

assign tmp_68_fu_830_p2 = (tmp_67_fu_825_p2 + smax6_cast_fu_816_p1);

assign tmp_69_fu_846_p3 = {{tmp_8_fu_836_p4}, {3'd0}};

assign tmp_70_fu_639_p2 = (bits_i - limit);

assign tmp_71_fu_659_p2 = (($signed(tmp_70_reg_1135) > $signed(32'd25)) ? 1'b1 : 1'b0);

assign tmp_72_fu_675_p2 = (32'd7 + limit);

assign tmp_73_fu_680_p2 = (tmp_72_fu_675_p2 - bits_load_reg_1129);

assign tmp_74_fu_685_p2 = (tmp_73_fu_680_p2 + smax_cast_fu_671_p1);

assign tmp_75_fu_701_p3 = {{tmp_9_fu_691_p4}, {3'd0}};

assign tmp_76_fu_854_p2 = (($signed(storemerge2_reg_216) < $signed(32'd25)) ? 1'b1 : 1'b0);

assign tmp_77_fu_709_p2 = (($signed(storemerge_reg_198) < $signed(32'd25)) ? 1'b1 : 1'b0);

assign tmp_78_fu_655_p1 = tmp_64_fu_649_p2[30:0];

assign tmp_79_fu_872_p2 = (32'd8 + storemerge2_reg_216);

assign tmp_7_fu_511_p4 = {{Bt_1_reg_1055[31:1]}};

assign tmp_80_fu_878_p2 = 32'd1 << tmp_62_reg_1109;

assign tmp_81_fu_883_p2 = ($signed(tmp_80_fu_878_p2) + $signed(32'd4294967295));

assign tmp_82_fu_889_p2 = (tmp_81_fu_883_p2 & MErrval_2_reg_1067);

assign tmp_83_fu_894_p2 = (tmp_82_fu_889_p2 + tmp_80_fu_878_p2);

assign tmp_84_fu_910_p2 = (tmp1_fu_905_p2 + tmp_64_reg_1147);

assign tmp_85_fu_787_p2 = tmp_83_reg_1195 << tmp_84_reg_1200;

assign tmp_86_fu_791_p2 = (tmp_85_fu_787_p2 | reg_r_i);

assign tmp_87_fu_645_p1 = tmp_70_fu_639_p2[30:0];

assign tmp_88_fu_727_p2 = (32'd8 + storemerge_reg_198);

assign tmp_89_fu_737_p2 = 32'd1 << qbpp;

assign tmp_8_fu_836_p4 = {{tmp_68_fu_830_p2[31:3]}};

assign tmp_90_fu_749_p2 = (tmp2_fu_743_p2 + MErrval_2_reg_1067);

assign tmp_91_fu_765_p2 = (tmp3_fu_760_p2 + tmp_70_reg_1135);

assign tmp_92_fu_776_p2 = tmp_90_reg_1172 << tmp_91_reg_1177;

assign tmp_93_fu_780_p2 = (tmp_92_fu_776_p2 | reg_r_i);

assign tmp_94_fu_860_p2 = reg_r_i << 32'd8;

assign tmp_95_fu_715_p2 = reg_r_i << 32'd8;

assign tmp_9_fu_691_p4 = {{tmp_74_fu_685_p2[31:3]}};

assign tmp_fu_229_p1 = $signed(Q);

assign unary_fu_620_p2 = $signed(MErrval_2_reg_1067) >>> tmp_62_fu_616_p1;

always @ (posedge ap_clk) begin
    tmp_62_reg_1109[31:8] <= 24'b000000000000000000000000;
    tmp_75_reg_1159[2:0] <= 3'b000;
    tmp_69_reg_1182[2:0] <= 3'b000;
end

endmodule //lossless_regular_mod
