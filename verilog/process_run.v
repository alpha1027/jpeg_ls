// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module process_run (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        runlen,
        eoline,
        color,
        bits_i,
        bits_o,
        bits_o_ap_vld,
        reg_r_i,
        reg_r_o,
        reg_r_o_ap_vld,
        limit_reduce,
        limit_reduce_ap_vld
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] runlen;
input  [0:0] eoline;
input  [31:0] color;
input  [31:0] bits_i;
output  [31:0] bits_o;
output   bits_o_ap_vld;
input  [31:0] reg_r_i;
output  [31:0] reg_r_o;
output   reg_r_o_ap_vld;
output  [31:0] limit_reduce;
output   limit_reduce_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] bits_o;
reg bits_o_ap_vld;
reg[31:0] reg_r_o;
reg reg_r_o_ap_vld;
reg limit_reduce_ap_vld;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    melcorder_ce0;
reg    melcorder_we0;
reg   [15:0] melcorder_d0;
wire   [15:0] melcorder_q0;
reg    melcstate_ce0;
reg    melcstate_we0;
reg   [31:0] melcstate_d0;
wire   [31:0] melcstate_q0;
reg   [4:0] J_address0;
reg    J_ce0;
wire   [3:0] J_q0;
reg    melclen_ce0;
reg    melclen_we0;
wire   [3:0] melclen_q0;
reg   [31:0] reg_172;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state9;
wire   [0:0] eoline_read_read_fu_62_p2;
reg   [2:0] melcorder_addr_reg_513;
reg   [2:0] melcstate_addr_reg_518;
reg   [2:0] melclen_addr_reg_523;
wire   [31:0] hits_fu_193_p2;
reg   [31:0] hits_reg_531;
wire    ap_CS_fsm_state3;
wire   [31:0] runlen_assign_fu_199_p2;
reg   [31:0] runlen_assign_reg_536;
wire   [0:0] tmp_1_fu_187_p2;
wire   [0:0] tmp_2_fu_205_p2;
reg   [0:0] tmp_2_reg_541;
wire   [0:0] icmp_fu_263_p2;
reg   [0:0] icmp_reg_545;
wire    ap_CS_fsm_state5;
wire   [31:0] nn_1_fu_328_p2;
wire    ap_CS_fsm_state7;
wire   [0:0] tmp_11_fu_292_p2;
wire   [0:0] tmp_21_fu_390_p2;
reg   [0:0] tmp_21_reg_565;
wire   [4:0] tmp_25_fu_430_p2;
reg   [4:0] tmp_25_reg_569;
wire   [0:0] tmp_29_fu_475_p2;
reg   [0:0] tmp_29_reg_574;
wire    ap_CS_fsm_state10;
reg   [31:0] nn_reg_132;
wire    ap_CS_fsm_state6;
reg   [31:0] p_0_reg_144;
reg   [31:0] nn1_reg_154;
wire  signed [63:0] tmp_fu_176_p1;
wire  signed [63:0] tmp_8_fu_276_p1;
wire  signed [63:0] tmp_31_fu_488_p1;
wire   [0:0] tmp_15_fu_338_p2;
wire    ap_CS_fsm_state8;
wire   [31:0] tmp_s_fu_211_p2;
wire   [31:0] tmp_10_fu_241_p2;
wire   [31:0] tmp_12_fu_298_p2;
wire   [31:0] tmp_14_fu_316_p2;
wire   [31:0] tmp_16_fu_344_p2;
wire   [31:0] tmp_20_fu_378_p2;
wire   [31:0] tmp_22_fu_396_p2;
wire   [31:0] tmp_24_fu_414_p2;
wire   [31:0] tmp_26_cast_fu_436_p1;
wire   [31:0] tmp_26_fu_445_p2;
wire   [31:0] tmp_28_fu_463_p2;
wire    ap_CS_fsm_state2;
wire   [15:0] tmp_9_fu_285_p2;
wire    ap_CS_fsm_state11;
wire   [15:0] tmp_32_fu_497_p2;
wire  signed [31:0] tmp_7_fu_269_p2;
wire  signed [31:0] tmp_30_fu_481_p2;
wire   [31:0] extLd7_fu_183_p1;
wire   [31:0] tmp_3_fu_223_p2;
wire   [31:0] tmp_4_fu_229_p2;
wire   [31:0] tmp_6_fu_235_p2;
wire   [26:0] tmp_5_fu_253_p4;
wire   [15:0] J_load_cast2_fu_281_p1;
wire   [31:0] tmp_13_fu_310_p2;
wire   [23:0] tmp_33_fu_334_p1;
wire   [23:0] tmp_17_fu_356_p2;
wire   [23:0] tmp_18_fu_362_p2;
wire   [31:0] tmp_18_cast_fu_368_p1;
wire   [31:0] tmp_19_fu_372_p2;
wire   [31:0] tmp_23_fu_408_p2;
wire   [4:0] extLd_cast_cast_fu_426_p1;
wire   [31:0] tmp_27_fu_457_p2;
wire   [15:0] J_load_1_cast1_fu_493_p1;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
end

process_run_melcocud #(
    .DataWidth( 16 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
melcorder_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(melcorder_addr_reg_513),
    .ce0(melcorder_ce0),
    .we0(melcorder_we0),
    .d0(melcorder_d0),
    .q0(melcorder_q0)
);

process_run_melcsdEe #(
    .DataWidth( 32 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
melcstate_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(melcstate_addr_reg_518),
    .ce0(melcstate_ce0),
    .we0(melcstate_we0),
    .d0(melcstate_d0),
    .q0(melcstate_q0)
);

process_run_J #(
    .DataWidth( 4 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
J_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(J_address0),
    .ce0(J_ce0),
    .q0(J_q0)
);

process_run_melclen #(
    .DataWidth( 4 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
melclen_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(melclen_addr_reg_523),
    .ce0(melclen_ce0),
    .we0(melclen_we0),
    .d0(J_q0),
    .q0(melclen_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_2_fu_205_p2 == 1'd0) & (tmp_1_fu_187_p2 == 1'd1))) begin
        nn1_reg_154 <= nn_reg_132;
    end else if (((1'b1 == ap_CS_fsm_state7) & (tmp_11_fu_292_p2 == 1'd1) & (tmp_2_reg_541 == 1'd0))) begin
        nn1_reg_154 <= nn_1_fu_328_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        nn_reg_132 <= hits_reg_531;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        nn_reg_132 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        p_0_reg_144 <= runlen_assign_reg_536;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        p_0_reg_144 <= runlen;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        hits_reg_531 <= hits_fu_193_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        icmp_reg_545 <= icmp_fu_263_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        melclen_addr_reg_523 <= tmp_fu_176_p1;
        melcorder_addr_reg_513 <= tmp_fu_176_p1;
        melcstate_addr_reg_518 <= tmp_fu_176_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state4))) begin
        reg_172 <= melcstate_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_1_fu_187_p2 == 1'd0))) begin
        runlen_assign_reg_536 <= runlen_assign_fu_199_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (((eoline_read_read_fu_62_p2 == 1'd1) & (tmp_11_fu_292_p2 == 1'd0)) | ((eoline_read_read_fu_62_p2 == 1'd1) & (tmp_2_reg_541 == 1'd1))))) begin
        tmp_21_reg_565 <= tmp_21_fu_390_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_25_reg_569 <= tmp_25_fu_430_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_29_reg_574 <= tmp_29_fu_475_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_1_fu_187_p2 == 1'd1))) begin
        tmp_2_reg_541 <= tmp_2_fu_205_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        J_address0 = tmp_31_fu_488_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        J_address0 = tmp_8_fu_276_p1;
    end else begin
        J_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state5))) begin
        J_ce0 = 1'b1;
    end else begin
        J_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        bits_o = tmp_26_fu_445_p2;
    end else if (((eoline_read_read_fu_62_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8) & (tmp_21_reg_565 == 1'd0))) begin
        bits_o = tmp_22_fu_396_p2;
    end else if (((1'b1 == ap_CS_fsm_state7) & (tmp_15_fu_338_p2 == 1'd0) & (tmp_11_fu_292_p2 == 1'd0) & (tmp_2_reg_541 == 1'd0))) begin
        bits_o = tmp_16_fu_344_p2;
    end else if (((1'b1 == ap_CS_fsm_state7) & (tmp_11_fu_292_p2 == 1'd1) & (tmp_2_reg_541 == 1'd0))) begin
        bits_o = tmp_12_fu_298_p2;
    end else if (((1'b1 == ap_CS_fsm_state3) & (tmp_2_fu_205_p2 == 1'd1) & (tmp_1_fu_187_p2 == 1'd1))) begin
        bits_o = tmp_s_fu_211_p2;
    end else begin
        bits_o = bits_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | ((eoline_read_read_fu_62_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8) & (tmp_21_reg_565 == 1'd0)) | ((1'b1 == ap_CS_fsm_state7) & (tmp_15_fu_338_p2 == 1'd0) & (tmp_11_fu_292_p2 == 1'd0) & (tmp_2_reg_541 == 1'd0)) | ((1'b1 == ap_CS_fsm_state7) & (tmp_11_fu_292_p2 == 1'd1) & (tmp_2_reg_541 == 1'd0)) | ((1'b1 == ap_CS_fsm_state3) & (tmp_2_fu_205_p2 == 1'd1) & (tmp_1_fu_187_p2 == 1'd1)))) begin
        bits_o_ap_vld = 1'b1;
    end else begin
        bits_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        limit_reduce_ap_vld = 1'b1;
    end else begin
        limit_reduce_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6))) begin
        melclen_ce0 = 1'b1;
    end else begin
        melclen_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state11) & (tmp_29_reg_574 == 1'd0)) | ((1'b1 == ap_CS_fsm_state6) & (icmp_reg_545 == 1'd1)))) begin
        melclen_we0 = 1'b1;
    end else begin
        melclen_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state6))) begin
        melcorder_ce0 = 1'b1;
    end else begin
        melcorder_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        melcorder_d0 = tmp_32_fu_497_p2;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        melcorder_d0 = tmp_9_fu_285_p2;
    end else begin
        melcorder_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state11) & (tmp_29_reg_574 == 1'd0)) | ((1'b1 == ap_CS_fsm_state6) & (icmp_reg_545 == 1'd1)))) begin
        melcorder_we0 = 1'b1;
    end else begin
        melcorder_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3))) begin
        melcstate_ce0 = 1'b1;
    end else begin
        melcstate_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        melcstate_d0 = tmp_30_fu_481_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        melcstate_d0 = tmp_7_fu_269_p2;
    end else begin
        melcstate_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_state10) & (tmp_29_fu_475_p2 == 1'd0)))) begin
        melcstate_we0 = 1'b1;
    end else begin
        melcstate_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        reg_r_o = tmp_28_fu_463_p2;
    end else if (((eoline_read_read_fu_62_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8) & (tmp_21_reg_565 == 1'd0))) begin
        reg_r_o = tmp_24_fu_414_p2;
    end else if (((1'b1 == ap_CS_fsm_state7) & (tmp_15_fu_338_p2 == 1'd0) & (tmp_11_fu_292_p2 == 1'd0) & (tmp_2_reg_541 == 1'd0))) begin
        reg_r_o = tmp_20_fu_378_p2;
    end else if (((1'b1 == ap_CS_fsm_state7) & (tmp_11_fu_292_p2 == 1'd1) & (tmp_2_reg_541 == 1'd0))) begin
        reg_r_o = tmp_14_fu_316_p2;
    end else if (((1'b1 == ap_CS_fsm_state3) & (tmp_2_fu_205_p2 == 1'd1) & (tmp_1_fu_187_p2 == 1'd1))) begin
        reg_r_o = tmp_10_fu_241_p2;
    end else begin
        reg_r_o = reg_r_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | ((eoline_read_read_fu_62_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8) & (tmp_21_reg_565 == 1'd0)) | ((1'b1 == ap_CS_fsm_state7) & (tmp_15_fu_338_p2 == 1'd0) & (tmp_11_fu_292_p2 == 1'd0) & (tmp_2_reg_541 == 1'd0)) | ((1'b1 == ap_CS_fsm_state7) & (tmp_11_fu_292_p2 == 1'd1) & (tmp_2_reg_541 == 1'd0)) | ((1'b1 == ap_CS_fsm_state3) & (tmp_2_fu_205_p2 == 1'd1) & (tmp_1_fu_187_p2 == 1'd1)))) begin
        reg_r_o_ap_vld = 1'b1;
    end else begin
        reg_r_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (tmp_1_fu_187_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_fu_263_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & ((tmp_2_reg_541 == 1'd1) | (tmp_11_fu_292_p2 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign J_load_1_cast1_fu_493_p1 = J_q0;

assign J_load_cast2_fu_281_p1 = J_q0;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign eoline_read_read_fu_62_p2 = eoline;

assign extLd7_fu_183_p1 = melcorder_q0;

assign extLd_cast_cast_fu_426_p1 = melclen_q0;

assign hits_fu_193_p2 = (nn_reg_132 + 32'd1);

assign icmp_fu_263_p2 = (($signed(tmp_5_fu_253_p4) < $signed(27'd1)) ? 1'b1 : 1'b0);

assign limit_reduce = tmp_26_cast_fu_436_p1;

assign nn_1_fu_328_p2 = ($signed(nn1_reg_154) + $signed(32'd4294967272));

assign runlen_assign_fu_199_p2 = (p_0_reg_144 - extLd7_fu_183_p1);

assign tmp_10_fu_241_p2 = (tmp_6_fu_235_p2 | reg_r_i);

assign tmp_11_fu_292_p2 = ((nn1_reg_154 > 32'd23) ? 1'b1 : 1'b0);

assign tmp_12_fu_298_p2 = ($signed(bits_i) + $signed(32'd4294967272));

assign tmp_13_fu_310_p2 = 32'd16777215 << tmp_12_fu_298_p2;

assign tmp_14_fu_316_p2 = (tmp_13_fu_310_p2 | reg_r_i);

assign tmp_15_fu_338_p2 = ((nn1_reg_154 == 32'd0) ? 1'b1 : 1'b0);

assign tmp_16_fu_344_p2 = (bits_i - nn1_reg_154);

assign tmp_17_fu_356_p2 = 24'd1 << tmp_33_fu_334_p1;

assign tmp_18_cast_fu_368_p1 = tmp_18_fu_362_p2;

assign tmp_18_fu_362_p2 = ($signed(tmp_17_fu_356_p2) + $signed(24'd16777215));

assign tmp_19_fu_372_p2 = tmp_18_cast_fu_368_p1 << tmp_16_fu_344_p2;

assign tmp_1_fu_187_p2 = ((p_0_reg_144 < extLd7_fu_183_p1) ? 1'b1 : 1'b0);

assign tmp_20_fu_378_p2 = (tmp_19_fu_372_p2 | reg_r_i);

assign tmp_21_fu_390_p2 = ((p_0_reg_144 == 32'd0) ? 1'b1 : 1'b0);

assign tmp_22_fu_396_p2 = ($signed(bits_i) + $signed(32'd4294967295));

assign tmp_23_fu_408_p2 = 32'd1 << tmp_22_fu_396_p2;

assign tmp_24_fu_414_p2 = (tmp_23_fu_408_p2 | reg_r_i);

assign tmp_25_fu_430_p2 = (extLd_cast_cast_fu_426_p1 + 5'd1);

assign tmp_26_cast_fu_436_p1 = tmp_25_reg_569;

assign tmp_26_fu_445_p2 = (bits_i - tmp_26_cast_fu_436_p1);

assign tmp_27_fu_457_p2 = p_0_reg_144 << tmp_26_fu_445_p2;

assign tmp_28_fu_463_p2 = (tmp_27_fu_457_p2 | reg_r_i);

assign tmp_29_fu_475_p2 = ((reg_172 == 32'd0) ? 1'b1 : 1'b0);

assign tmp_2_fu_205_p2 = (($signed(nn_reg_132) < $signed(32'd24)) ? 1'b1 : 1'b0);

assign tmp_30_fu_481_p2 = ($signed(reg_172) + $signed(32'd4294967295));

assign tmp_31_fu_488_p1 = tmp_30_fu_481_p2;

assign tmp_32_fu_497_p2 = 16'd1 << J_load_1_cast1_fu_493_p1;

assign tmp_33_fu_334_p1 = nn1_reg_154[23:0];

assign tmp_3_fu_223_p2 = 32'd1 << nn_reg_132;

assign tmp_4_fu_229_p2 = ($signed(tmp_3_fu_223_p2) + $signed(32'd4294967295));

assign tmp_5_fu_253_p4 = {{melcstate_q0[31:5]}};

assign tmp_6_fu_235_p2 = tmp_4_fu_229_p2 << tmp_s_fu_211_p2;

assign tmp_7_fu_269_p2 = (reg_172 + 32'd1);

assign tmp_8_fu_276_p1 = tmp_7_fu_269_p2;

assign tmp_9_fu_285_p2 = 16'd1 << J_load_cast2_fu_281_p1;

assign tmp_fu_176_p1 = $signed(color);

assign tmp_s_fu_211_p2 = (bits_i - nn_reg_132);

endmodule //process_run
