// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module lossless_end_of_run (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Ra,
        Rb,
        Ix,
        RItype,
        N_address0,
        N_ce0,
        N_we0,
        N_d0,
        N_q0,
        A_address0,
        A_ce0,
        A_we0,
        A_d0,
        A_q0,
        alpha,
        ceil_half_alpha,
        B_address0,
        B_ce0,
        B_we0,
        B_d0,
        B_q0,
        RESET,
        limit,
        limit_reduce,
        bits_i,
        bits_o,
        bits_o_ap_vld,
        reg_r_i,
        reg_r_o,
        reg_r_o_ap_vld,
        qbpp
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_state9 = 14'd256;
parameter    ap_ST_fsm_state10 = 14'd512;
parameter    ap_ST_fsm_state11 = 14'd1024;
parameter    ap_ST_fsm_state12 = 14'd2048;
parameter    ap_ST_fsm_state13 = 14'd4096;
parameter    ap_ST_fsm_state14 = 14'd8192;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] Ra;
input  [15:0] Rb;
input  [15:0] Ix;
input  [0:0] RItype;
output  [8:0] N_address0;
output   N_ce0;
output   N_we0;
output  [31:0] N_d0;
input  [31:0] N_q0;
output  [8:0] A_address0;
output   A_ce0;
output   A_we0;
output  [31:0] A_d0;
input  [31:0] A_q0;
input  [31:0] alpha;
input  [31:0] ceil_half_alpha;
output  [8:0] B_address0;
output   B_ce0;
output   B_we0;
output  [31:0] B_d0;
input  [31:0] B_q0;
input  [31:0] RESET;
input  [31:0] limit;
input  [31:0] limit_reduce;
input  [31:0] bits_i;
output  [31:0] bits_o;
output   bits_o_ap_vld;
input  [31:0] reg_r_i;
output  [31:0] reg_r_o;
output   reg_r_o_ap_vld;
input  [31:0] qbpp;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[8:0] N_address0;
reg N_ce0;
reg N_we0;
reg[8:0] A_address0;
reg A_ce0;
reg A_we0;
reg[31:0] A_d0;
reg[8:0] B_address0;
reg B_ce0;
reg B_we0;
reg[31:0] B_d0;
reg[31:0] bits_o;
reg bits_o_ap_vld;
reg[31:0] reg_r_o;
reg reg_r_o_ap_vld;

(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] RItype_read_read_fu_76_p2;
wire   [63:0] tmp_cast_fu_220_p3;
reg   [63:0] tmp_cast_reg_860;
reg   [8:0] N_addr_reg_865;
reg   [8:0] A_addr_reg_870;
wire   [31:0] RItype_cast1_fu_230_p1;
reg   [31:0] RItype_cast1_reg_875;
wire    ap_CS_fsm_state2;
reg   [31:0] Nt_reg_881;
reg   [31:0] At_reg_888;
wire  signed [31:0] tmp_94_fu_277_p1;
reg  signed [31:0] tmp_94_reg_893;
wire  signed [16:0] Errval_1_fu_287_p3;
reg  signed [16:0] Errval_1_reg_898;
wire  signed [31:0] Errval_1_cast_fu_294_p1;
reg  signed [31:0] Errval_1_cast_reg_903;
wire   [31:0] At_2_fu_298_p3;
reg   [31:0] At_2_reg_909;
wire   [31:0] k_2_fu_310_p2;
wire    ap_CS_fsm_state3;
wire   [31:0] Nt_4_fu_316_p2;
wire   [0:0] tmp_95_fu_305_p2;
wire   [31:0] Errval_3_fu_361_p3;
reg   [31:0] Errval_3_reg_927;
reg   [8:0] B_addr_reg_933;
reg   [0:0] tmp_100_reg_938;
reg   [31:0] B_load_reg_942;
wire    ap_CS_fsm_state4;
wire   [31:0] oldmap_fu_412_p1;
reg   [31:0] oldmap_reg_948;
wire   [31:0] tmp_101_fu_416_p2;
reg   [31:0] tmp_101_reg_953;
wire   [31:0] oldmap_0_neg_fu_421_p3;
reg   [31:0] oldmap_0_neg_reg_958;
wire   [31:0] tmp_102_fu_429_p2;
reg   [31:0] tmp_102_reg_963;
wire   [31:0] tmp_104_fu_455_p2;
wire    ap_CS_fsm_state5;
reg   [30:0] tmp_11_reg_973;
wire   [0:0] tmp_109_fu_499_p2;
reg   [0:0] tmp_109_reg_978;
wire    ap_CS_fsm_state6;
reg   [30:0] tmp_15_reg_982;
reg   [30:0] tmp_17_reg_987;
wire   [31:0] tmp_114_fu_547_p2;
reg   [31:0] tmp_114_reg_992;
wire    ap_CS_fsm_state7;
wire   [31:0] unary_fu_553_p2;
reg   [31:0] unary_reg_997;
reg   [31:0] bits_load_reg_1005;
wire   [31:0] tmp_123_fu_569_p2;
reg   [31:0] tmp_123_reg_1011;
wire   [0:0] tmp_115_fu_559_p2;
wire   [30:0] tmp_131_fu_575_p1;
reg   [30:0] tmp_131_reg_1018;
wire   [31:0] tmp_116_fu_579_p2;
reg   [31:0] tmp_116_reg_1023;
wire   [30:0] tmp_117_fu_585_p1;
reg   [30:0] tmp_117_reg_1030;
wire   [31:0] tmp_128_fu_631_p3;
reg   [31:0] tmp_128_reg_1035;
wire    ap_CS_fsm_state8;
wire   [31:0] tmp_141_fu_657_p2;
wire    ap_CS_fsm_state9;
wire   [0:0] tmp_130_fu_639_p2;
wire   [31:0] tmp_143_fu_679_p2;
reg   [31:0] tmp_143_reg_1048;
wire   [31:0] tmp_144_fu_696_p2;
reg   [31:0] tmp_144_reg_1053;
wire   [31:0] tmp_146_fu_711_p2;
wire    ap_CS_fsm_state10;
wire   [31:0] tmp_122_fu_759_p3;
reg   [31:0] tmp_122_reg_1063;
wire    ap_CS_fsm_state11;
wire   [31:0] tmp_132_fu_785_p2;
wire    ap_CS_fsm_state12;
wire   [0:0] tmp_129_fu_767_p2;
wire   [31:0] tmp_133_fu_791_p2;
reg   [31:0] tmp_133_reg_1076;
wire   [31:0] tmp_134_fu_797_p2;
reg   [31:0] tmp_134_reg_1081;
wire   [31:0] tmp_137_fu_814_p2;
reg   [31:0] tmp_137_reg_1086;
wire   [31:0] tmp_139_fu_840_p2;
wire    ap_CS_fsm_state13;
reg   [31:0] k_reg_139;
reg   [31:0] Nt4_reg_151;
wire   [31:0] MErrval_fu_449_p2;
reg   [31:0] ap_phi_mux_MErrval4_phi_fu_164_p4;
reg   [31:0] MErrval4_reg_161;
wire   [31:0] MErrval_2_fu_439_p2;
reg   [31:0] B_load_2_reg_171;
reg   [31:0] ap_phi_mux_tmp_112_phi_fu_183_p4;
reg   [31:0] tmp_112_reg_180;
reg   [31:0] storemerge_reg_189;
reg   [31:0] storemerge2_reg_198;
reg   [31:0] storemerge1_reg_207;
wire   [31:0] tmp_147_fu_645_p2;
wire   [31:0] tmp_140_fu_773_p2;
wire    ap_CS_fsm_state14;
wire   [31:0] tmp_108_fu_489_p2;
wire  signed [31:0] tmp_110_fu_524_p1;
wire  signed [31:0] tmp_111_fu_528_p1;
wire   [16:0] tmp_cast_4_fu_233_p1;
wire   [16:0] tmp_99_cast_fu_237_p1;
wire   [16:0] Errval_fu_241_p2;
wire   [0:0] tmp_s_fu_247_p2;
wire   [16:0] Errval_4_fu_253_p2;
wire   [30:0] tmp_9_fu_267_p4;
wire   [16:0] p_s_fu_259_p3;
wire   [31:0] At_1_fu_281_p2;
wire   [0:0] tmp_fu_322_p3;
wire   [31:0] Errval_5_fu_333_p2;
wire   [31:0] Errval_2_fu_338_p3;
wire   [0:0] tmp_96_fu_349_p2;
wire   [31:0] Errval_6_fu_355_p2;
wire   [31:0] tmp_97_fu_377_p2;
wire   [0:0] notlhs_fu_389_p2;
wire   [0:0] tmp_98_fu_383_p2;
wire   [0:0] tmp3_fu_400_p2;
wire   [0:0] notrhs_fu_395_p2;
wire   [0:0] tmp_99_fu_406_p2;
wire   [31:0] tmp_105_fu_435_p2;
wire   [31:0] tmp_103_fu_445_p2;
wire   [0:0] tmp_106_fu_461_p2;
wire   [31:0] tmp_117_cast_fu_466_p1;
wire   [31:0] tmp_107_fu_470_p2;
wire  signed [31:0] absErrval_fu_486_p1;
wire   [0:0] tmp_124_fu_589_p2;
wire   [30:0] smax_fu_594_p3;
wire   [31:0] tmp_125_fu_605_p2;
wire   [31:0] tmp_126_fu_610_p2;
wire   [31:0] smax_cast_fu_601_p1;
wire   [31:0] tmp_127_fu_615_p2;
wire   [28:0] tmp_18_fu_621_p4;
wire   [31:0] tmp_142_fu_667_p2;
wire   [31:0] tmp5_fu_673_p2;
wire   [31:0] p_neg4_fu_685_p2;
wire   [31:0] tmp6_fu_691_p2;
wire   [31:0] tmp_145_fu_707_p2;
wire   [0:0] tmp_118_fu_717_p2;
wire   [30:0] smax5_fu_722_p3;
wire   [31:0] tmp_119_fu_733_p2;
wire   [31:0] tmp_120_fu_738_p2;
wire   [31:0] smax5_cast_fu_729_p1;
wire   [31:0] tmp_121_fu_743_p2;
wire   [28:0] tmp_16_fu_749_p4;
wire   [31:0] p_neg_fu_803_p2;
wire   [31:0] tmp4_fu_809_p2;
wire   [31:0] tmp_135_fu_825_p2;
wire   [31:0] tmp_136_fu_830_p2;
wire   [31:0] tmp_138_fu_835_p2;
reg   [13:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if ((tmp_100_reg_938 == 1'd0)) begin
            B_load_2_reg_171 <= B_load_reg_942;
        end else if ((tmp_100_reg_938 == 1'd1)) begin
            B_load_2_reg_171 <= tmp_104_fu_455_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if ((tmp_100_reg_938 == 1'd0)) begin
            MErrval4_reg_161 <= MErrval_2_fu_439_p2;
        end else if ((tmp_100_reg_938 == 1'd1)) begin
            MErrval4_reg_161 <= MErrval_fu_449_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_95_fu_305_p2 == 1'd1))) begin
        Nt4_reg_151 <= Nt_4_fu_316_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        Nt4_reg_151 <= N_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_95_fu_305_p2 == 1'd1))) begin
        k_reg_139 <= k_2_fu_310_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        k_reg_139 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        storemerge1_reg_207 <= tmp_139_fu_840_p2;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        storemerge1_reg_207 <= tmp_146_fu_711_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (tmp_129_fu_767_p2 == 1'd1))) begin
        storemerge2_reg_198 <= tmp_132_fu_785_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        storemerge2_reg_198 <= tmp_116_reg_1023;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (tmp_130_fu_639_p2 == 1'd1))) begin
        storemerge_reg_189 <= tmp_141_fu_657_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        storemerge_reg_189 <= tmp_123_reg_1011;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (tmp_109_fu_499_p2 == 1'd0))) begin
        tmp_112_reg_180 <= Nt_reg_881;
    end else if (((1'b1 == ap_CS_fsm_state7) & (tmp_109_reg_978 == 1'd1))) begin
        tmp_112_reg_180 <= tmp_94_reg_893;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        A_addr_reg_870[1 : 0] <= tmp_cast_fu_220_p3[1 : 0];
        N_addr_reg_865[1 : 0] <= tmp_cast_fu_220_p3[1 : 0];
        tmp_cast_reg_860[1 : 0] <= tmp_cast_fu_220_p3[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        At_2_reg_909 <= At_2_fu_298_p3;
        At_reg_888 <= A_q0;
        Errval_1_cast_reg_903 <= Errval_1_cast_fu_294_p1;
        Errval_1_reg_898 <= Errval_1_fu_287_p3;
        Nt_reg_881 <= N_q0;
        RItype_cast1_reg_875[0] <= RItype_cast1_fu_230_p1[0];
        tmp_94_reg_893 <= tmp_94_fu_277_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_95_fu_305_p2 == 1'd0))) begin
        B_addr_reg_933[1 : 0] <= tmp_cast_reg_860[1 : 0];
        Errval_3_reg_927 <= Errval_3_fu_361_p3;
        tmp_100_reg_938 <= Errval_3_fu_361_p3[32'd31];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        B_load_reg_942 <= B_q0;
        oldmap_reg_948[0] <= oldmap_fu_412_p1[0];
        tmp_101_reg_953[31 : 1] <= tmp_101_fu_416_p2[31 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        bits_load_reg_1005 <= bits_i;
        tmp_114_reg_992 <= tmp_114_fu_547_p2;
        unary_reg_997 <= unary_fu_553_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (tmp_100_reg_938 == 1'd0))) begin
        oldmap_0_neg_reg_958 <= oldmap_0_neg_fu_421_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (tmp_100_reg_938 == 1'd1))) begin
        tmp_102_reg_963 <= tmp_102_fu_429_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_109_reg_978 <= tmp_109_fu_499_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (tmp_115_fu_559_p2 == 1'd1))) begin
        tmp_116_reg_1023 <= tmp_116_fu_579_p2;
        tmp_117_reg_1030 <= tmp_117_fu_585_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_11_reg_973 <= {{tmp_107_fu_470_p2[31:1]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        tmp_122_reg_1063[31 : 3] <= tmp_122_fu_759_p3[31 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (tmp_115_fu_559_p2 == 1'd0))) begin
        tmp_123_reg_1011 <= tmp_123_fu_569_p2;
        tmp_131_reg_1018 <= tmp_131_fu_575_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_128_reg_1035[31 : 3] <= tmp_128_fu_631_p3[31 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (tmp_129_fu_767_p2 == 1'd0))) begin
        tmp_133_reg_1076 <= tmp_133_fu_791_p2;
        tmp_134_reg_1081 <= tmp_134_fu_797_p2;
        tmp_137_reg_1086 <= tmp_137_fu_814_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (tmp_130_fu_639_p2 == 1'd0))) begin
        tmp_143_reg_1048 <= tmp_143_fu_679_p2;
        tmp_144_reg_1053 <= tmp_144_fu_696_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (tmp_109_fu_499_p2 == 1'd1))) begin
        tmp_15_reg_982 <= {{tmp_108_fu_489_p2[31:1]}};
        tmp_17_reg_987 <= {{B_load_2_reg_171[31:1]}};
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        A_address0 = A_addr_reg_870;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        A_address0 = tmp_cast_fu_220_p3;
    end else begin
        A_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        A_d0 = tmp_110_fu_524_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        A_d0 = tmp_108_fu_489_p2;
    end else begin
        A_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state7) & (tmp_109_reg_978 == 1'd1)))) begin
        A_we0 = 1'b1;
    end else begin
        A_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5))) begin
        B_address0 = B_addr_reg_933;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        B_address0 = tmp_cast_reg_860;
    end else begin
        B_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3))) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        B_d0 = tmp_111_fu_528_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        B_d0 = tmp_104_fu_455_p2;
    end else begin
        B_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state7) & (tmp_109_reg_978 == 1'd1)) | ((1'b1 == ap_CS_fsm_state5) & (tmp_100_reg_938 == 1'd1)))) begin
        B_we0 = 1'b1;
    end else begin
        B_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        N_address0 = N_addr_reg_865;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        N_address0 = tmp_cast_fu_220_p3;
    end else begin
        N_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        N_ce0 = 1'b1;
    end else begin
        N_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        N_we0 = 1'b1;
    end else begin
        N_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if ((tmp_100_reg_938 == 1'd0)) begin
            ap_phi_mux_MErrval4_phi_fu_164_p4 = MErrval_2_fu_439_p2;
        end else if ((tmp_100_reg_938 == 1'd1)) begin
            ap_phi_mux_MErrval4_phi_fu_164_p4 = MErrval_fu_449_p2;
        end else begin
            ap_phi_mux_MErrval4_phi_fu_164_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_MErrval4_phi_fu_164_p4 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (tmp_109_reg_978 == 1'd1))) begin
        ap_phi_mux_tmp_112_phi_fu_183_p4 = tmp_94_reg_893;
    end else begin
        ap_phi_mux_tmp_112_phi_fu_183_p4 = tmp_112_reg_180;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (tmp_129_fu_767_p2 == 1'd0))) begin
        bits_o = tmp_137_fu_814_p2;
    end else if (((1'b1 == ap_CS_fsm_state9) & (tmp_130_fu_639_p2 == 1'd0))) begin
        bits_o = tmp_144_fu_696_p2;
    end else begin
        bits_o = bits_i;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (tmp_129_fu_767_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state9) & (tmp_130_fu_639_p2 == 1'd0)))) begin
        bits_o_ap_vld = 1'b1;
    end else begin
        bits_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        reg_r_o = storemerge1_reg_207;
    end else if (((1'b1 == ap_CS_fsm_state12) & (tmp_129_fu_767_p2 == 1'd1))) begin
        reg_r_o = tmp_140_fu_773_p2;
    end else if (((1'b1 == ap_CS_fsm_state9) & (tmp_130_fu_639_p2 == 1'd1))) begin
        reg_r_o = tmp_147_fu_645_p2;
    end else begin
        reg_r_o = reg_r_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | ((1'b1 == ap_CS_fsm_state12) & (tmp_129_fu_767_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state9) & (tmp_130_fu_639_p2 == 1'd1)))) begin
        reg_r_o_ap_vld = 1'b1;
    end else begin
        reg_r_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (tmp_95_fu_305_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (tmp_115_fu_559_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (tmp_130_fu_639_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (tmp_129_fu_767_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign At_1_fu_281_p2 = ($signed(tmp_94_fu_277_p1) + $signed(A_q0));

assign At_2_fu_298_p3 = ((RItype[0:0] === 1'b1) ? At_1_fu_281_p2 : A_q0);

assign Errval_1_cast_fu_294_p1 = Errval_1_fu_287_p3;

assign Errval_1_fu_287_p3 = ((RItype[0:0] === 1'b1) ? Errval_fu_241_p2 : p_s_fu_259_p3);

assign Errval_2_fu_338_p3 = ((tmp_fu_322_p3[0:0] === 1'b1) ? Errval_5_fu_333_p2 : Errval_1_cast_reg_903);

assign Errval_3_fu_361_p3 = ((tmp_96_fu_349_p2[0:0] === 1'b1) ? Errval_2_fu_338_p3 : Errval_6_fu_355_p2);

assign Errval_4_fu_253_p2 = (17'd0 - Errval_fu_241_p2);

assign Errval_5_fu_333_p2 = ($signed(alpha) + $signed(Errval_1_cast_reg_903));

assign Errval_6_fu_355_p2 = (Errval_2_fu_338_p3 - alpha);

assign Errval_fu_241_p2 = (tmp_cast_4_fu_233_p1 - tmp_99_cast_fu_237_p1);

assign MErrval_2_fu_439_p2 = (oldmap_0_neg_reg_958 + tmp_105_fu_435_p2);

assign MErrval_fu_449_p2 = (tmp_103_fu_445_p2 + oldmap_reg_948);

assign N_d0 = (ap_phi_mux_tmp_112_phi_fu_183_p4 + 32'd1);

assign Nt_4_fu_316_p2 = Nt4_reg_151 << 32'd1;

assign RItype_cast1_fu_230_p1 = RItype;

assign RItype_read_read_fu_76_p2 = RItype;

assign absErrval_fu_486_p1 = $signed(tmp_11_reg_973);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign k_2_fu_310_p2 = (k_reg_139 + 32'd1);

assign notlhs_fu_389_p2 = ((k_reg_139 == 32'd0) ? 1'b1 : 1'b0);

assign notrhs_fu_395_p2 = ((Errval_3_reg_927 != 32'd0) ? 1'b1 : 1'b0);

assign oldmap_0_neg_fu_421_p3 = ((tmp_99_fu_406_p2[0:0] === 1'b1) ? 32'd4294967295 : 32'd0);

assign oldmap_fu_412_p1 = tmp_99_fu_406_p2;

assign p_neg4_fu_685_p2 = (qbpp ^ 32'd4294967295);

assign p_neg_fu_803_p2 = (k_reg_139 ^ 32'd4294967295);

assign p_s_fu_259_p3 = ((tmp_s_fu_247_p2[0:0] === 1'b1) ? Errval_4_fu_253_p2 : Errval_fu_241_p2);

assign smax5_cast_fu_729_p1 = smax5_fu_722_p3;

assign smax5_fu_722_p3 = ((tmp_118_fu_717_p2[0:0] === 1'b1) ? tmp_117_reg_1030 : 31'd25);

assign smax_cast_fu_601_p1 = smax_fu_594_p3;

assign smax_fu_594_p3 = ((tmp_124_fu_589_p2[0:0] === 1'b1) ? tmp_131_reg_1018 : 31'd25);

assign tmp3_fu_400_p2 = (tmp_98_fu_383_p2 & notlhs_fu_389_p2);

assign tmp4_fu_809_p2 = (tmp_122_reg_1063 + p_neg_fu_803_p2);

assign tmp5_fu_673_p2 = ($signed(tmp_142_fu_667_p2) + $signed(32'd4294967295));

assign tmp6_fu_691_p2 = (tmp_128_reg_1035 + p_neg4_fu_685_p2);

assign tmp_101_fu_416_p2 = Errval_3_reg_927 << 32'd1;

assign tmp_102_fu_429_p2 = (tmp_101_fu_416_p2 ^ 32'd4294967295);

assign tmp_103_fu_445_p2 = (tmp_102_reg_963 - RItype_cast1_reg_875);

assign tmp_104_fu_455_p2 = (B_load_reg_942 + 32'd1);

assign tmp_105_fu_435_p2 = (tmp_101_reg_953 - RItype_cast1_reg_875);

assign tmp_106_fu_461_p2 = (1'd1 ^ RItype);

assign tmp_107_fu_470_p2 = (ap_phi_mux_MErrval4_phi_fu_164_p4 + tmp_117_cast_fu_466_p1);

assign tmp_108_fu_489_p2 = ($signed(At_reg_888) + $signed(absErrval_fu_486_p1));

assign tmp_109_fu_499_p2 = ((Nt_reg_881 == RESET) ? 1'b1 : 1'b0);

assign tmp_110_fu_524_p1 = $signed(tmp_15_reg_982);

assign tmp_111_fu_528_p1 = $signed(tmp_17_reg_987);

assign tmp_114_fu_547_p2 = (limit - limit_reduce);

assign tmp_115_fu_559_p2 = (($signed(unary_fu_553_p2) < $signed(tmp_114_fu_547_p2)) ? 1'b1 : 1'b0);

assign tmp_116_fu_579_p2 = (bits_i - unary_fu_553_p2);

assign tmp_117_cast_fu_466_p1 = tmp_106_fu_461_p2;

assign tmp_117_fu_585_p1 = tmp_116_fu_579_p2[30:0];

assign tmp_118_fu_717_p2 = (($signed(tmp_116_reg_1023) > $signed(32'd25)) ? 1'b1 : 1'b0);

assign tmp_119_fu_733_p2 = (32'd7 + unary_reg_997);

assign tmp_120_fu_738_p2 = (tmp_119_fu_733_p2 - bits_load_reg_1005);

assign tmp_121_fu_743_p2 = (tmp_120_fu_738_p2 + smax5_cast_fu_729_p1);

assign tmp_122_fu_759_p3 = {{tmp_16_fu_749_p4}, {3'd0}};

assign tmp_123_fu_569_p2 = (bits_i - tmp_114_fu_547_p2);

assign tmp_124_fu_589_p2 = (($signed(tmp_123_reg_1011) > $signed(32'd25)) ? 1'b1 : 1'b0);

assign tmp_125_fu_605_p2 = (32'd7 + tmp_114_reg_992);

assign tmp_126_fu_610_p2 = (tmp_125_fu_605_p2 - bits_load_reg_1005);

assign tmp_127_fu_615_p2 = (tmp_126_fu_610_p2 + smax_cast_fu_601_p1);

assign tmp_128_fu_631_p3 = {{tmp_18_fu_621_p4}, {3'd0}};

assign tmp_129_fu_767_p2 = (($signed(storemerge2_reg_198) < $signed(32'd25)) ? 1'b1 : 1'b0);

assign tmp_130_fu_639_p2 = (($signed(storemerge_reg_189) < $signed(32'd25)) ? 1'b1 : 1'b0);

assign tmp_131_fu_575_p1 = tmp_123_fu_569_p2[30:0];

assign tmp_132_fu_785_p2 = (32'd8 + storemerge2_reg_198);

assign tmp_133_fu_791_p2 = 32'd1 << k_reg_139;

assign tmp_134_fu_797_p2 = ($signed(tmp_133_fu_791_p2) + $signed(32'd4294967295));

assign tmp_135_fu_825_p2 = (tmp_134_reg_1081 & MErrval4_reg_161);

assign tmp_136_fu_830_p2 = (tmp_135_fu_825_p2 + tmp_133_reg_1076);

assign tmp_137_fu_814_p2 = (tmp4_fu_809_p2 + tmp_116_reg_1023);

assign tmp_138_fu_835_p2 = tmp_136_fu_830_p2 << tmp_137_reg_1086;

assign tmp_139_fu_840_p2 = (tmp_138_fu_835_p2 | reg_r_i);

assign tmp_140_fu_773_p2 = reg_r_i << 32'd8;

assign tmp_141_fu_657_p2 = (32'd8 + storemerge_reg_189);

assign tmp_142_fu_667_p2 = 32'd1 << qbpp;

assign tmp_143_fu_679_p2 = (tmp5_fu_673_p2 + MErrval4_reg_161);

assign tmp_144_fu_696_p2 = (tmp6_fu_691_p2 + tmp_123_reg_1011);

assign tmp_145_fu_707_p2 = tmp_143_reg_1048 << tmp_144_reg_1053;

assign tmp_146_fu_711_p2 = (tmp_145_fu_707_p2 | reg_r_i);

assign tmp_147_fu_645_p2 = reg_r_i << 32'd8;

assign tmp_16_fu_749_p4 = {{tmp_121_fu_743_p2[31:3]}};

assign tmp_18_fu_621_p4 = {{tmp_127_fu_615_p2[31:3]}};

assign tmp_94_fu_277_p1 = $signed(tmp_9_fu_267_p4);

assign tmp_95_fu_305_p2 = (($signed(Nt4_reg_151) < $signed(At_2_reg_909)) ? 1'b1 : 1'b0);

assign tmp_96_fu_349_p2 = (($signed(Errval_2_fu_338_p3) < $signed(ceil_half_alpha)) ? 1'b1 : 1'b0);

assign tmp_97_fu_377_p2 = B_q0 << 32'd1;

assign tmp_98_fu_383_p2 = (($signed(tmp_97_fu_377_p2) < $signed(Nt4_reg_151)) ? 1'b1 : 1'b0);

assign tmp_99_cast_fu_237_p1 = Rb;

assign tmp_99_fu_406_p2 = (tmp3_fu_400_p2 & notrhs_fu_395_p2);

assign tmp_9_fu_267_p4 = {{N_q0[31:1]}};

assign tmp_cast_4_fu_233_p1 = Ix;

assign tmp_cast_fu_220_p3 = ((RItype[0:0] === 1'b1) ? 64'd366 : 64'd365);

assign tmp_fu_322_p3 = Errval_1_reg_898[32'd16];

assign tmp_s_fu_247_p2 = ((Rb < Ra) ? 1'b1 : 1'b0);

assign unary_fu_553_p2 = $signed(MErrval4_reg_161) >>> k_reg_139;

always @ (posedge ap_clk) begin
    tmp_cast_reg_860[63:2] <= 62'b00000000000000000000000000000000000000000000000000000001011011;
    N_addr_reg_865[8:2] <= 7'b1011011;
    A_addr_reg_870[8:2] <= 7'b1011011;
    RItype_cast1_reg_875[31:1] <= 31'b0000000000000000000000000000000;
    B_addr_reg_933[8:2] <= 7'b1011011;
    oldmap_reg_948[31:1] <= 31'b0000000000000000000000000000000;
    tmp_101_reg_953[0] <= 1'b0;
    tmp_128_reg_1035[2:0] <= 3'b000;
    tmp_122_reg_1063[2:0] <= 3'b000;
end

endmodule //lossless_end_of_run
