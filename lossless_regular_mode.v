// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="lossless_regular_mode,hls_ip_2018_2_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485tffg1158-2,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.701000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=8,HLS_SYN_FF=1582,HLS_SYN_LUT=2971,HLS_VERSION=2018_2_1}" *)

module lossless_regular_mode (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Q,
        SIGN,
        Px,
        xp,
        N_address0,
        N_ce0,
        N_we0,
        N_d0,
        N_q0,
        A_address0,
        A_ce0,
        A_we0,
        A_d0,
        A_q0,
        C_address0,
        C_ce0,
        C_we0,
        C_d0,
        C_q0,
        highmask,
        alpha,
        B_address0,
        B_ce0,
        B_we0,
        B_d0,
        B_q0,
        ceil_half_alpha,
        RESET,
        limit,
        qbpp
);

parameter    ap_ST_fsm_state1 = 18'd1;
parameter    ap_ST_fsm_state2 = 18'd2;
parameter    ap_ST_fsm_state3 = 18'd4;
parameter    ap_ST_fsm_state4 = 18'd8;
parameter    ap_ST_fsm_state5 = 18'd16;
parameter    ap_ST_fsm_state6 = 18'd32;
parameter    ap_ST_fsm_state7 = 18'd64;
parameter    ap_ST_fsm_state8 = 18'd128;
parameter    ap_ST_fsm_state9 = 18'd256;
parameter    ap_ST_fsm_state10 = 18'd512;
parameter    ap_ST_fsm_state11 = 18'd1024;
parameter    ap_ST_fsm_state12 = 18'd2048;
parameter    ap_ST_fsm_state13 = 18'd4096;
parameter    ap_ST_fsm_state14 = 18'd8192;
parameter    ap_ST_fsm_state15 = 18'd16384;
parameter    ap_ST_fsm_state16 = 18'd32768;
parameter    ap_ST_fsm_state17 = 18'd65536;
parameter    ap_ST_fsm_state18 = 18'd131072;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] Q;
input  [31:0] SIGN;
input  [31:0] Px;
input  [15:0] xp;
output  [8:0] N_address0;
output   N_ce0;
output   N_we0;
output  [31:0] N_d0;
input  [31:0] N_q0;
output  [8:0] A_address0;
output   A_ce0;
output   A_we0;
output  [31:0] A_d0;
input  [31:0] A_q0;
output  [8:0] C_address0;
output   C_ce0;
output   C_we0;
output  [31:0] C_d0;
input  [31:0] C_q0;
input  [31:0] highmask;
input  [31:0] alpha;
output  [8:0] B_address0;
output   B_ce0;
output   B_we0;
output  [31:0] B_d0;
input  [31:0] B_q0;
input  [31:0] ceil_half_alpha;
input  [31:0] RESET;
input  [31:0] limit;
input  [31:0] qbpp;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[8:0] N_address0;
reg N_ce0;
reg N_we0;
reg[8:0] A_address0;
reg A_ce0;
reg A_we0;
reg[31:0] A_d0;
reg[8:0] C_address0;
reg C_ce0;
reg C_we0;
reg[31:0] C_d0;
reg[8:0] B_address0;
reg B_ce0;
reg B_we0;
reg[31:0] B_d0;

(* fsm_encoding = "none" *) reg   [17:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] bits;
reg   [31:0] reg_r;
wire  signed [63:0] tmp_fu_233_p1;
reg  signed [63:0] tmp_reg_917;
reg   [8:0] C_addr_reg_924;
reg  signed [31:0] C_load_reg_929;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire   [31:0] grp_fu_238_p2;
reg   [31:0] tmp_1_reg_944;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire  signed [31:0] tmp_7_fu_314_p2;
reg  signed [31:0] tmp_7_reg_955;
reg   [8:0] N_addr_reg_960;
wire    ap_CS_fsm_state7;
reg   [8:0] A_addr_reg_965;
wire   [31:0] grp_fu_320_p2;
reg   [31:0] Errval_reg_970;
reg   [0:0] tmp_6_reg_976;
reg   [31:0] Nt_3_reg_981;
wire    ap_CS_fsm_state8;
reg   [31:0] At_reg_990;
wire   [31:0] Errval_5_fu_336_p3;
reg   [31:0] Errval_5_reg_996;
wire   [7:0] k_1_fu_347_p2;
wire    ap_CS_fsm_state9;
wire   [31:0] nst_1_fu_353_p2;
wire   [0:0] tmp_s_fu_342_p2;
reg   [8:0] B_addr_reg_1018;
wire   [0:0] tmp_11_fu_363_p2;
reg   [0:0] tmp_11_reg_1023;
wire   [31:0] Errval_3_fu_368_p2;
reg   [31:0] Errval_3_reg_1030;
wire   [31:0] absErrval_1_fu_372_p2;
reg   [31:0] absErrval_1_reg_1035;
wire   [0:0] slt_fu_389_p2;
reg   [0:0] slt_reg_1041;
wire    ap_CS_fsm_state10;
wire   [30:0] tmp_12_fu_395_p1;
reg   [30:0] tmp_12_reg_1046;
wire   [31:0] Bt_1_fu_408_p2;
reg   [31:0] Bt_1_reg_1051;
wire   [31:0] tmp_14_fu_414_p2;
reg   [31:0] tmp_14_reg_1058;
wire   [31:0] MErrval_2_fu_463_p3;
reg   [31:0] MErrval_2_reg_1063;
wire    ap_CS_fsm_state11;
wire   [0:0] tmp_15_fu_474_p2;
reg   [0:0] tmp_15_reg_1070;
wire   [31:0] tmp_20_fu_529_p2;
reg   [31:0] tmp_20_reg_1074;
wire    ap_CS_fsm_state12;
wire   [0:0] tmp_21_fu_535_p2;
reg   [0:0] tmp_21_reg_1079;
wire   [31:0] tmp_26_fu_552_p2;
reg   [31:0] tmp_26_reg_1086;
wire   [0:0] tmp_22_fu_558_p2;
reg   [0:0] tmp_22_reg_1092;
wire   [31:0] tmp_30_fu_575_p2;
reg   [31:0] tmp_30_reg_1099;
wire   [31:0] tmp_32_fu_612_p1;
reg   [31:0] tmp_32_reg_1105;
wire    ap_CS_fsm_state13;
wire   [31:0] unary_fu_616_p2;
reg   [31:0] unary_reg_1111;
wire   [0:0] tmp_33_fu_625_p2;
reg   [0:0] tmp_33_reg_1121;
reg   [31:0] bits_load_reg_1125;
wire   [31:0] tmp_42_fu_635_p2;
reg   [31:0] tmp_42_reg_1131;
wire   [30:0] tmp_49_fu_641_p1;
reg   [30:0] tmp_49_reg_1138;
wire   [31:0] tmp_34_fu_645_p2;
reg   [31:0] tmp_34_reg_1143;
wire   [30:0] tmp_41_fu_651_p1;
reg   [30:0] tmp_41_reg_1150;
wire   [31:0] tmp_47_fu_697_p3;
reg   [31:0] tmp_47_reg_1155;
wire    ap_CS_fsm_state14;
wire   [31:0] tmp_57_fu_723_p2;
wire    ap_CS_fsm_state15;
wire   [0:0] tmp_51_fu_705_p2;
wire   [31:0] tmp_65_fu_745_p2;
reg   [31:0] tmp_65_reg_1168;
wire   [31:0] tmp_66_fu_761_p2;
reg   [31:0] tmp_66_reg_1173;
wire   [31:0] tmp_39_fu_842_p3;
reg   [31:0] tmp_39_reg_1178;
wire    ap_CS_fsm_state17;
wire   [31:0] tmp_53_fu_868_p2;
wire    ap_CS_fsm_state18;
wire   [0:0] tmp_50_fu_850_p2;
wire   [31:0] tmp_59_fu_890_p2;
reg   [31:0] tmp_59_reg_1191;
wire   [31:0] tmp_60_fu_906_p2;
reg   [31:0] tmp_60_reg_1196;
reg   [7:0] k_reg_162;
reg   [31:0] nst1_reg_174;
wire  signed [31:0] Bt_2_fu_516_p1;
reg   [31:0] ap_phi_mux_tmp_19_phi_fu_186_p4;
reg   [31:0] tmp_19_reg_183;
wire  signed [31:0] Nt_fu_502_p1;
reg   [31:0] ap_phi_mux_Nt1_phi_fu_195_p4;
reg   [31:0] Nt1_reg_192;
reg   [31:0] storemerge_reg_202;
wire   [31:0] tmp_68_fu_776_p2;
reg   [31:0] ap_phi_mux_storemerge1_phi_fu_214_p4;
wire    ap_CS_fsm_state16;
wire   [31:0] tmp_62_fu_787_p2;
reg   [31:0] storemerge2_reg_220;
wire   [31:0] tmp_63_fu_711_p2;
wire   [31:0] tmp_54_fu_856_p2;
wire   [0:0] tmp_23_fu_541_p2;
wire   [31:0] tmp_25_fu_546_p2;
wire   [0:0] tmp_24_fu_564_p2;
wire   [31:0] tmp_29_fu_569_p2;
wire   [31:0] Nt_2_fu_522_p2;
wire  signed [31:0] tmp_18_fu_488_p1;
wire   [31:0] storemerge7_fu_591_p3;
wire   [31:0] storemerge8_fu_604_p3;
wire   [31:0] Px_assign_fu_247_p2;
wire   [31:0] tmp_3_fu_256_p2;
wire   [0:0] tmp_4_fu_262_p2;
wire   [31:0] Px_assign_1_fu_280_p2;
wire   [0:0] tmp_5_fu_268_p3;
wire   [0:0] sel_tmp1_fu_294_p2;
wire   [0:0] sel_tmp2_fu_300_p2;
wire   [31:0] Px_assign_2_fu_286_p3;
wire   [31:0] Ix_fu_243_p1;
wire   [31:0] Px_assign_3_fu_306_p3;
wire    ap_CS_fsm_state6;
wire   [31:0] Errval_2_fu_332_p2;
wire   [31:0] tmp_8_fu_384_p2;
wire   [31:0] tmp_10_fu_378_p2;
wire   [31:0] Errval_1_fu_403_p3;
wire   [31:0] absErrval_2_fu_398_p3;
wire   [0:0] tmp_2_fu_420_p2;
wire   [0:0] rev7_fu_426_p2;
wire   [0:0] tmp_9_fu_431_p2;
wire   [31:0] tmp10_cast_cast_fu_449_p3;
wire   [31:0] tmp_13_fu_444_p2;
wire   [31:0] MErrval_fu_437_p3;
wire   [31:0] MErrval_1_fu_457_p2;
wire   [30:0] tmp_17_fu_479_p4;
wire   [30:0] tmp_16_fu_493_p4;
wire   [30:0] tmp_40_fu_507_p4;
wire   [0:0] tmp_27_fu_581_p2;
wire   [31:0] tmp_28_fu_585_p2;
wire   [0:0] tmp_31_fu_599_p2;
wire   [0:0] tmp_43_fu_655_p2;
wire   [30:0] smax_fu_660_p3;
wire   [31:0] tmp_44_fu_671_p2;
wire   [31:0] tmp_45_fu_676_p2;
wire   [31:0] smax_cast_fu_667_p1;
wire   [31:0] tmp_46_fu_681_p2;
wire   [28:0] tmp_52_fu_687_p4;
wire   [31:0] tmp_64_fu_733_p2;
wire   [31:0] tmp2_fu_739_p2;
wire   [31:0] p_neg5_fu_750_p2;
wire   [31:0] tmp3_fu_756_p2;
wire   [31:0] tmp_67_fu_772_p2;
wire   [31:0] tmp_61_fu_783_p2;
wire   [0:0] tmp_35_fu_800_p2;
wire   [30:0] smax6_fu_805_p3;
wire   [31:0] tmp_36_fu_816_p2;
wire   [31:0] tmp_37_fu_821_p2;
wire   [31:0] smax6_cast_fu_812_p1;
wire   [31:0] tmp_38_fu_826_p2;
wire   [28:0] tmp_48_fu_832_p4;
wire   [31:0] tmp_55_fu_874_p2;
wire   [31:0] tmp_56_fu_879_p2;
wire   [31:0] tmp_58_fu_885_p2;
wire   [31:0] p_neg3_fu_896_p2;
wire   [31:0] tmp1_fu_901_p2;
reg   [17:0] ap_NS_fsm;
reg    ap_condition_340;

// power-on initialization
initial begin
#0 ap_CS_fsm = 18'd1;
#0 bits = 32'd0;
#0 reg_r = 32'd0;
end

lossless_regular_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
lossless_regular_bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(C_load_reg_929),
    .din1(SIGN),
    .ce(1'b1),
    .dout(grp_fu_238_p2)
);

lossless_regular_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
lossless_regular_bkb_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_7_reg_955),
    .din1(SIGN),
    .ce(1'b1),
    .dout(grp_fu_320_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (tmp_15_fu_474_p2 == 1'd0))) begin
        Nt1_reg_192 <= Nt_3_reg_981;
    end else if (((1'b1 == ap_CS_fsm_state12) & (tmp_15_reg_1070 == 1'd1))) begin
        Nt1_reg_192 <= Nt_fu_502_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (tmp_50_fu_850_p2 == 1'd0))) begin
        bits <= tmp_60_fu_906_p2;
    end else if (((1'b1 == ap_CS_fsm_state15) & (tmp_51_fu_705_p2 == 1'd0))) begin
        bits <= tmp_66_fu_761_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (tmp_s_fu_342_p2 == 1'd1))) begin
        k_reg_162 <= k_1_fu_347_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        k_reg_162 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (tmp_s_fu_342_p2 == 1'd1))) begin
        nst1_reg_174 <= nst_1_fu_353_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        nst1_reg_174 <= N_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (tmp_50_fu_850_p2 == 1'd1))) begin
        reg_r <= tmp_54_fu_856_p2;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        reg_r <= ap_phi_mux_storemerge1_phi_fu_214_p4;
    end else if (((1'b1 == ap_CS_fsm_state15) & (tmp_51_fu_705_p2 == 1'd1))) begin
        reg_r <= tmp_63_fu_711_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (tmp_50_fu_850_p2 == 1'd1))) begin
        storemerge2_reg_220 <= tmp_53_fu_868_p2;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        storemerge2_reg_220 <= tmp_34_reg_1143;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (tmp_51_fu_705_p2 == 1'd1))) begin
        storemerge_reg_202 <= tmp_57_fu_723_p2;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        storemerge_reg_202 <= tmp_42_reg_1131;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (tmp_15_fu_474_p2 == 1'd0))) begin
        tmp_19_reg_183 <= Bt_1_reg_1051;
    end else if (((1'b1 == ap_CS_fsm_state12) & (tmp_15_reg_1070 == 1'd1))) begin
        tmp_19_reg_183 <= Bt_2_fu_516_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        A_addr_reg_965 <= tmp_reg_917;
        Errval_reg_970 <= grp_fu_320_p2;
        N_addr_reg_960 <= tmp_reg_917;
        tmp_6_reg_976 <= grp_fu_320_p2[32'd31];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        At_reg_990 <= A_q0;
        Errval_5_reg_996 <= Errval_5_fu_336_p3;
        Nt_3_reg_981 <= N_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (tmp_s_fu_342_p2 == 1'd0))) begin
        B_addr_reg_1018 <= tmp_reg_917;
        Errval_3_reg_1030 <= Errval_3_fu_368_p2;
        absErrval_1_reg_1035 <= absErrval_1_fu_372_p2;
        tmp_11_reg_1023 <= tmp_11_fu_363_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        Bt_1_reg_1051 <= Bt_1_fu_408_p2;
        slt_reg_1041 <= slt_fu_389_p2;
        tmp_14_reg_1058 <= tmp_14_fu_414_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        C_addr_reg_924 <= tmp_fu_233_p1;
        tmp_reg_917 <= tmp_fu_233_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        C_load_reg_929 <= C_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        MErrval_2_reg_1063 <= MErrval_2_fu_463_p3;
        tmp_15_reg_1070 <= tmp_15_fu_474_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        bits_load_reg_1125 <= bits;
        tmp_32_reg_1105[7 : 0] <= tmp_32_fu_612_p1[7 : 0];
        tmp_33_reg_1121 <= tmp_33_fu_625_p2;
        unary_reg_1111 <= unary_fu_616_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (tmp_11_reg_1023 == 1'd1))) begin
        tmp_12_reg_1046 <= tmp_12_fu_395_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_1_reg_944 <= grp_fu_238_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp_20_reg_1074 <= tmp_20_fu_529_p2;
        tmp_21_reg_1079 <= tmp_21_fu_535_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (tmp_21_fu_535_p2 == 1'd1))) begin
        tmp_22_reg_1092 <= tmp_22_fu_558_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (tmp_21_fu_535_p2 == 1'd0))) begin
        tmp_26_reg_1086 <= tmp_26_fu_552_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (tmp_22_fu_558_p2 == 1'd1) & (tmp_21_fu_535_p2 == 1'd1))) begin
        tmp_30_reg_1099 <= tmp_30_fu_575_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (tmp_33_fu_625_p2 == 1'd1))) begin
        tmp_34_reg_1143 <= tmp_34_fu_645_p2;
        tmp_41_reg_1150 <= tmp_41_fu_651_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        tmp_39_reg_1178[31 : 3] <= tmp_39_fu_842_p3[31 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (tmp_33_fu_625_p2 == 1'd0))) begin
        tmp_42_reg_1131 <= tmp_42_fu_635_p2;
        tmp_49_reg_1138 <= tmp_49_fu_641_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        tmp_47_reg_1155[31 : 3] <= tmp_47_fu_697_p3[31 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (tmp_50_fu_850_p2 == 1'd0))) begin
        tmp_59_reg_1191 <= tmp_59_fu_890_p2;
        tmp_60_reg_1196 <= tmp_60_fu_906_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (tmp_51_fu_705_p2 == 1'd0))) begin
        tmp_65_reg_1168 <= tmp_65_fu_745_p2;
        tmp_66_reg_1173 <= tmp_66_fu_761_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_7_reg_955 <= tmp_7_fu_314_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        A_address0 = A_addr_reg_965;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        A_address0 = tmp_reg_917;
    end else begin
        A_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        A_d0 = tmp_18_fu_488_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        A_d0 = tmp_14_fu_414_p2;
    end else begin
        A_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_state11) & (tmp_15_fu_474_p2 == 1'd1)))) begin
        A_we0 = 1'b1;
    end else begin
        A_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state13) & (tmp_22_reg_1092 == 1'd1) & (tmp_21_reg_1079 == 1'd1)) | ((1'b1 == ap_CS_fsm_state13) & (tmp_21_reg_1079 == 1'd0)))) begin
        B_address0 = B_addr_reg_1018;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        B_address0 = tmp_reg_917;
    end else begin
        B_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9) | ((1'b1 == ap_CS_fsm_state13) & (tmp_22_reg_1092 == 1'd1) & (tmp_21_reg_1079 == 1'd1)) | ((1'b1 == ap_CS_fsm_state13) & (tmp_21_reg_1079 == 1'd0)))) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) & (tmp_22_reg_1092 == 1'd1) & (tmp_21_reg_1079 == 1'd1))) begin
        B_d0 = storemerge8_fu_604_p3;
    end else if (((1'b1 == ap_CS_fsm_state13) & (tmp_21_reg_1079 == 1'd0))) begin
        B_d0 = storemerge7_fu_591_p3;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        B_d0 = Bt_2_fu_516_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        B_d0 = Bt_1_reg_1051;
    end else begin
        B_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state13) & (tmp_22_reg_1092 == 1'd1) & (tmp_21_reg_1079 == 1'd1)) | ((1'b1 == ap_CS_fsm_state13) & (tmp_21_reg_1079 == 1'd0)) | ((1'b1 == ap_CS_fsm_state12) & (tmp_15_reg_1070 == 1'd1)))) begin
        B_we0 = 1'b1;
    end else begin
        B_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (tmp_24_fu_564_p2 == 1'd1) & (tmp_22_fu_558_p2 == 1'd1) & (tmp_21_fu_535_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state12) & (tmp_21_fu_535_p2 == 1'd0) & (tmp_23_fu_541_p2 == 1'd1)))) begin
        C_address0 = C_addr_reg_924;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        C_address0 = tmp_fu_233_p1;
    end else begin
        C_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state12) & (tmp_24_fu_564_p2 == 1'd1) & (tmp_22_fu_558_p2 == 1'd1) & (tmp_21_fu_535_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state12) & (tmp_21_fu_535_p2 == 1'd0) & (tmp_23_fu_541_p2 == 1'd1)))) begin
        C_ce0 = 1'b1;
    end else begin
        C_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        if ((1'b1 == ap_condition_340)) begin
            C_d0 = tmp_29_fu_569_p2;
        end else if (((tmp_21_fu_535_p2 == 1'd0) & (tmp_23_fu_541_p2 == 1'd1))) begin
            C_d0 = tmp_25_fu_546_p2;
        end else begin
            C_d0 = 'bx;
        end
    end else begin
        C_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (tmp_24_fu_564_p2 == 1'd1) & (tmp_22_fu_558_p2 == 1'd1) & (tmp_21_fu_535_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state12) & (tmp_21_fu_535_p2 == 1'd0) & (tmp_23_fu_541_p2 == 1'd1)))) begin
        C_we0 = 1'b1;
    end else begin
        C_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        N_address0 = N_addr_reg_960;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        N_address0 = tmp_reg_917;
    end else begin
        N_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state7))) begin
        N_ce0 = 1'b1;
    end else begin
        N_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        N_we0 = 1'b1;
    end else begin
        N_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (tmp_15_reg_1070 == 1'd1))) begin
        ap_phi_mux_Nt1_phi_fu_195_p4 = Nt_fu_502_p1;
    end else begin
        ap_phi_mux_Nt1_phi_fu_195_p4 = Nt1_reg_192;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        if ((tmp_33_reg_1121 == 1'd1)) begin
            ap_phi_mux_storemerge1_phi_fu_214_p4 = tmp_62_fu_787_p2;
        end else if ((tmp_33_reg_1121 == 1'd0)) begin
            ap_phi_mux_storemerge1_phi_fu_214_p4 = tmp_68_fu_776_p2;
        end else begin
            ap_phi_mux_storemerge1_phi_fu_214_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_storemerge1_phi_fu_214_p4 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (tmp_15_reg_1070 == 1'd1))) begin
        ap_phi_mux_tmp_19_phi_fu_186_p4 = Bt_2_fu_516_p1;
    end else begin
        ap_phi_mux_tmp_19_phi_fu_186_p4 = tmp_19_reg_183;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (tmp_s_fu_342_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (tmp_33_fu_625_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_CS_fsm_state15) & (tmp_51_fu_705_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if (((1'b1 == ap_CS_fsm_state18) & (tmp_50_fu_850_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Bt_1_fu_408_p2 = (B_q0 + Errval_1_fu_403_p3);

assign Bt_2_fu_516_p1 = $signed(tmp_40_fu_507_p4);

assign Errval_1_fu_403_p3 = ((tmp_11_reg_1023[0:0] === 1'b1) ? Errval_5_reg_996 : Errval_3_reg_1030);

assign Errval_2_fu_332_p2 = (alpha + Errval_reg_970);

assign Errval_3_fu_368_p2 = (Errval_5_reg_996 - alpha);

assign Errval_5_fu_336_p3 = ((tmp_6_reg_976[0:0] === 1'b1) ? Errval_2_fu_332_p2 : Errval_reg_970);

assign Ix_fu_243_p1 = xp;

assign MErrval_1_fu_457_p2 = (tmp10_cast_cast_fu_449_p3 + tmp_13_fu_444_p2);

assign MErrval_2_fu_463_p3 = ((tmp_11_reg_1023[0:0] === 1'b1) ? MErrval_fu_437_p3 : MErrval_1_fu_457_p2);

assign MErrval_fu_437_p3 = {{tmp_12_reg_1046}, {tmp_9_fu_431_p2}};

assign N_d0 = Nt_2_fu_522_p2;

assign Nt_2_fu_522_p2 = (ap_phi_mux_Nt1_phi_fu_195_p4 + 32'd1);

assign Nt_fu_502_p1 = $signed(tmp_16_fu_493_p4);

assign Px_assign_1_fu_280_p2 = ($signed(alpha) + $signed(32'd4294967295));

assign Px_assign_2_fu_286_p3 = ((tmp_4_fu_262_p2[0:0] === 1'b1) ? Px_assign_fu_247_p2 : Px_assign_1_fu_280_p2);

assign Px_assign_3_fu_306_p3 = ((sel_tmp2_fu_300_p2[0:0] === 1'b1) ? 32'd0 : Px_assign_2_fu_286_p3);

assign Px_assign_fu_247_p2 = (tmp_1_reg_944 + Px);

assign absErrval_1_fu_372_p2 = (32'd0 - Errval_3_fu_368_p2);

assign absErrval_2_fu_398_p3 = ((tmp_11_reg_1023[0:0] === 1'b1) ? Errval_5_reg_996 : absErrval_1_reg_1035);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_condition_340 = ((tmp_24_fu_564_p2 == 1'd1) & (tmp_22_fu_558_p2 == 1'd1) & (tmp_21_fu_535_p2 == 1'd1));
end

assign k_1_fu_347_p2 = (k_reg_162 + 8'd1);

assign nst_1_fu_353_p2 = nst1_reg_174 << 32'd1;

assign p_neg3_fu_896_p2 = (tmp_32_reg_1105 ^ 32'd4294967295);

assign p_neg5_fu_750_p2 = (qbpp ^ 32'd4294967295);

assign rev7_fu_426_p2 = (slt_reg_1041 ^ 1'd1);

assign sel_tmp1_fu_294_p2 = (tmp_4_fu_262_p2 ^ 1'd1);

assign sel_tmp2_fu_300_p2 = (tmp_5_fu_268_p3 & sel_tmp1_fu_294_p2);

assign slt_fu_389_p2 = (($signed(tmp_8_fu_384_p2) < $signed(tmp_10_fu_378_p2)) ? 1'b1 : 1'b0);

assign smax6_cast_fu_812_p1 = smax6_fu_805_p3;

assign smax6_fu_805_p3 = ((tmp_35_fu_800_p2[0:0] === 1'b1) ? tmp_41_reg_1150 : 31'd25);

assign smax_cast_fu_667_p1 = smax_fu_660_p3;

assign smax_fu_660_p3 = ((tmp_43_fu_655_p2[0:0] === 1'b1) ? tmp_49_reg_1138 : 31'd25);

assign storemerge7_fu_591_p3 = ((tmp_27_fu_581_p2[0:0] === 1'b1) ? tmp_26_reg_1086 : tmp_28_fu_585_p2);

assign storemerge8_fu_604_p3 = ((tmp_31_fu_599_p2[0:0] === 1'b1) ? 32'd0 : tmp_30_reg_1099);

assign tmp10_cast_cast_fu_449_p3 = ((tmp_9_fu_431_p2[0:0] === 1'b1) ? 32'd4294967294 : 32'd4294967295);

assign tmp1_fu_901_p2 = (tmp_39_reg_1178 + p_neg3_fu_896_p2);

assign tmp2_fu_739_p2 = ($signed(tmp_64_fu_733_p2) + $signed(32'd4294967295));

assign tmp3_fu_756_p2 = (tmp_47_reg_1155 + p_neg5_fu_750_p2);

assign tmp_10_fu_378_p2 = B_q0 << 32'd1;

assign tmp_11_fu_363_p2 = (($signed(Errval_5_reg_996) < $signed(ceil_half_alpha)) ? 1'b1 : 1'b0);

assign tmp_12_fu_395_p1 = Errval_5_reg_996[30:0];

assign tmp_13_fu_444_p2 = absErrval_1_reg_1035 << 32'd1;

assign tmp_14_fu_414_p2 = (At_reg_990 + absErrval_2_fu_398_p3);

assign tmp_15_fu_474_p2 = ((Nt_3_reg_981 == RESET) ? 1'b1 : 1'b0);

assign tmp_16_fu_493_p4 = {{Nt_3_reg_981[31:1]}};

assign tmp_17_fu_479_p4 = {{tmp_14_reg_1058[31:1]}};

assign tmp_18_fu_488_p1 = $signed(tmp_17_fu_479_p4);

assign tmp_20_fu_529_p2 = (ap_phi_mux_Nt1_phi_fu_195_p4 ^ 32'd4294967295);

assign tmp_21_fu_535_p2 = (($signed(ap_phi_mux_tmp_19_phi_fu_186_p4) > $signed(tmp_20_fu_529_p2)) ? 1'b1 : 1'b0);

assign tmp_22_fu_558_p2 = (($signed(ap_phi_mux_tmp_19_phi_fu_186_p4) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign tmp_23_fu_541_p2 = (($signed(C_load_reg_929) > $signed(32'd4294967168)) ? 1'b1 : 1'b0);

assign tmp_24_fu_564_p2 = (($signed(C_load_reg_929) < $signed(32'd127)) ? 1'b1 : 1'b0);

assign tmp_25_fu_546_p2 = ($signed(C_load_reg_929) + $signed(32'd4294967295));

assign tmp_26_fu_552_p2 = (Nt_2_fu_522_p2 + ap_phi_mux_tmp_19_phi_fu_186_p4);

assign tmp_27_fu_581_p2 = (($signed(tmp_26_reg_1086) > $signed(tmp_20_reg_1074)) ? 1'b1 : 1'b0);

assign tmp_28_fu_585_p2 = (32'd0 - Nt1_reg_192);

assign tmp_29_fu_569_p2 = ($signed(C_load_reg_929) + $signed(32'd1));

assign tmp_2_fu_420_p2 = ((k_reg_162 == 8'd0) ? 1'b1 : 1'b0);

assign tmp_30_fu_575_p2 = (ap_phi_mux_tmp_19_phi_fu_186_p4 - Nt_2_fu_522_p2);

assign tmp_31_fu_599_p2 = (($signed(tmp_30_reg_1099) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign tmp_32_fu_612_p1 = k_reg_162;

assign tmp_33_fu_625_p2 = (($signed(unary_fu_616_p2) < $signed(limit)) ? 1'b1 : 1'b0);

assign tmp_34_fu_645_p2 = (bits - unary_fu_616_p2);

assign tmp_35_fu_800_p2 = (($signed(tmp_34_reg_1143) > $signed(32'd25)) ? 1'b1 : 1'b0);

assign tmp_36_fu_816_p2 = (32'd7 + unary_reg_1111);

assign tmp_37_fu_821_p2 = (tmp_36_fu_816_p2 - bits_load_reg_1125);

assign tmp_38_fu_826_p2 = (tmp_37_fu_821_p2 + smax6_cast_fu_812_p1);

assign tmp_39_fu_842_p3 = {{tmp_48_fu_832_p4}, {3'd0}};

assign tmp_3_fu_256_p2 = (highmask & Px_assign_fu_247_p2);

assign tmp_40_fu_507_p4 = {{Bt_1_reg_1051[31:1]}};

assign tmp_41_fu_651_p1 = tmp_34_fu_645_p2[30:0];

assign tmp_42_fu_635_p2 = (bits - limit);

assign tmp_43_fu_655_p2 = (($signed(tmp_42_reg_1131) > $signed(32'd25)) ? 1'b1 : 1'b0);

assign tmp_44_fu_671_p2 = (32'd7 + limit);

assign tmp_45_fu_676_p2 = (tmp_44_fu_671_p2 - bits_load_reg_1125);

assign tmp_46_fu_681_p2 = (tmp_45_fu_676_p2 + smax_cast_fu_667_p1);

assign tmp_47_fu_697_p3 = {{tmp_52_fu_687_p4}, {3'd0}};

assign tmp_48_fu_832_p4 = {{tmp_38_fu_826_p2[31:3]}};

assign tmp_49_fu_641_p1 = tmp_42_fu_635_p2[30:0];

assign tmp_4_fu_262_p2 = ((tmp_3_fu_256_p2 == 32'd0) ? 1'b1 : 1'b0);

assign tmp_50_fu_850_p2 = (($signed(storemerge2_reg_220) < $signed(32'd25)) ? 1'b1 : 1'b0);

assign tmp_51_fu_705_p2 = (($signed(storemerge_reg_202) < $signed(32'd25)) ? 1'b1 : 1'b0);

assign tmp_52_fu_687_p4 = {{tmp_46_fu_681_p2[31:3]}};

assign tmp_53_fu_868_p2 = (32'd8 + storemerge2_reg_220);

assign tmp_54_fu_856_p2 = reg_r << 32'd8;

assign tmp_55_fu_874_p2 = 32'd1 << tmp_32_reg_1105;

assign tmp_56_fu_879_p2 = ($signed(tmp_55_fu_874_p2) + $signed(32'd4294967295));

assign tmp_57_fu_723_p2 = (32'd8 + storemerge_reg_202);

assign tmp_58_fu_885_p2 = (tmp_56_fu_879_p2 & MErrval_2_reg_1063);

assign tmp_59_fu_890_p2 = (tmp_58_fu_885_p2 + tmp_55_fu_874_p2);

assign tmp_5_fu_268_p3 = Px_assign_fu_247_p2[32'd31];

assign tmp_60_fu_906_p2 = (tmp1_fu_901_p2 + tmp_34_reg_1143);

assign tmp_61_fu_783_p2 = tmp_59_reg_1191 << tmp_60_reg_1196;

assign tmp_62_fu_787_p2 = (tmp_61_fu_783_p2 | reg_r);

assign tmp_63_fu_711_p2 = reg_r << 32'd8;

assign tmp_64_fu_733_p2 = 32'd1 << qbpp;

assign tmp_65_fu_745_p2 = (tmp2_fu_739_p2 + MErrval_2_reg_1063);

assign tmp_66_fu_761_p2 = (tmp3_fu_756_p2 + tmp_42_reg_1131);

assign tmp_67_fu_772_p2 = tmp_65_reg_1168 << tmp_66_reg_1173;

assign tmp_68_fu_776_p2 = (tmp_67_fu_772_p2 | reg_r);

assign tmp_7_fu_314_p2 = (Ix_fu_243_p1 - Px_assign_3_fu_306_p3);

assign tmp_8_fu_384_p2 = (32'd0 - Nt_3_reg_981);

assign tmp_9_fu_431_p2 = (tmp_2_fu_420_p2 & rev7_fu_426_p2);

assign tmp_fu_233_p1 = $signed(Q);

assign tmp_s_fu_342_p2 = (($signed(nst1_reg_174) < $signed(At_reg_990)) ? 1'b1 : 1'b0);

assign unary_fu_616_p2 = $signed(MErrval_2_reg_1063) >>> tmp_32_fu_612_p1;

always @ (posedge ap_clk) begin
    tmp_32_reg_1105[31:8] <= 24'b000000000000000000000000;
    tmp_47_reg_1155[2:0] <= 3'b000;
    tmp_39_reg_1178[2:0] <= 3'b000;
end

endmodule //lossless_regular_mode
